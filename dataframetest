# -----------------------------------------------------------
# this function reads headers.txt and returns a dictionary relating the table id to the topic
#-------------------------------------------------------------
def read_headers():
        ins  = open( "/home/bigboy/UCSD-PRJ/UCSD-GOHS-DNHS/data/headers.txt", "r" )
	
	dict = {}
        for line in ins:
                # print line
                line = line.rstrip()
                line = line.lstrip()
                id, title = line.split(" ", 1)
                # print "Id: "  +  id  +  " Title:"  +  title
                dict[id] = title
        # print str(dict)
        return dict

# -----------------------------------------------------------
# this function displays the data of w1010.txt by creating a dataframe
#-------------------------------------------------------------
def process_id_data(data):
		
	

	frame = pd.DataFrame(data, columns = ['Total', 'Total %bp', 'White', 'White %bp', 'African american', 'African american %bp', 'Native american', 'Native american %bp', 'Asian', 'Asian %bp', 'Pacific islander', 'Pacific islander %bp', 'Other race', 'Other race %bp', 'Two+ races', 'Two+ races %bp', 'White alone', 'White alone %bp', 'Hispanic', 'Hispanic %bp'], index = ['population', '<5 males', '5 males', '6-11 males', '12-14 males', '15 males', '16-17 males', '18-24 males', '25-34 males', '35-44 males', '45-54 males', '55-64 males', '65-74 males', '>75 males', '<5 females', '5 females', '6-11 females', '12-14 females', '15 females', '16-17 females', '18-24 females', '25-34 females', '35-44 females', '45-54 females', '55-64 females', '65-74 females', '>75 females'])

	print frame

# -----------------------------------------------------------
# this function reads w1010.txt and processes the data
#-------------------------------------------------------------
def read_data(dict):

        current_id = "doesnotexist"

	total = []
	totalmap = []
	totalfap = []
	totalmbp = []
	totalfbp = []
	totalbp = []

	white = []
	whitemap = []
	whitefap = []
	whitembp = []
	whitefbp = []
	whitebp = []
	
	black = []
	blackmap = []
	blackfap = []
	blackmbp = []
	blackfbp = []
	blackbp = []

	indian = []
	indianmap = []
	indianfap = []
	indianmbp = []
	indianfbp = []
	indianbp = []

	asian = []
	asianmap = []
	asianfap = []
	asianmbp = []
	asianfbp = []
	asianbp = []

	pacific = []
	pacificmap = []
	pacificfap = []
	pacificmbp = []
	pacificfbp = []
	pacificbp = []

	other = []
	othermap = []
	otherfap = []
	othermbp = []
	otherfbp = []
	otherbp = []

	two = []
	twomap = []
	twofap = []
	twombp = []
	twofbp = []
	twobp = []

	alone = []
	alonemap = []
	alonefap = []
	alonembp = []
	alonefbp = []
	alonebp = []

	latino = []
	latinomap = []
	latinofap = []
	latinombp = []
	latinofbp = []
	latinobp = []


#code processing total data

	ans = open( "/home/bigboy/UCSD-PRJ/UCSD-GOHS-DNHS/data/w1010.txt", "r" )
	for i, line in enumerate(ans):
		if i > 589:	 
			break
                line = line.strip()
                line = line.rstrip()
                line = line.lstrip()
                items = line.split("|")
                for i in range(len(items)):
                        items[i] = items[i].strip()
                if items[3] == "1":
                        current_id = items[2]
		if current_id == "B17001":
			if items[3] == "1":
				items[5] = items[5].replace(",", "")
				total.append(items[5])
			if items[3] == "2":
				items[5] = items[5].replace(",", "")
				totalbp.append(items[5])
			elif int(items[3]) in range(4,17):
				totalmbp.append(items[5])
				for i in range(len(totalmbp)):
					totalmbp[i] = totalmbp[i].replace(",", "")
			elif int(items[3]) in range(18,31):
				totalfbp.append(items[5])
				for i in range(len(totalfbp)):
					totalfbp[i] = totalfbp[i].replace(",", "")
			elif int(items[3]) in range(33,46):
				totalmap.append(items[5])
				for i in range(len(totalmap)):
					totalmap[i] = totalmap[i].replace(",", "")
			elif int(items[3]) in range(47,60):
				totalfap.append(items[5])
				for i in range(len(totalfap)):
					totalfap[i] = totalfap[i].replace(",", "")
			totalm = [int(i)+int(j) for i,j in zip(totalmap, totalmbp)]
			totalf = [int(i)+int(j) for i,j in zip(totalfap, totalfbp)]
			Total = total + totalm + totalf
			for i in range(len(Total)):
				Total[i] = ''  + str(Total[i]) + '' 
			totalpcbp = [(float(i)/float(j)) * 100 for i,j in zip(totalbp, total)]
			totalmpcbp = [(float(i)/float(j)) * 100 for i,j in zip(totalmbp, totalm)]
			totalfpcbp = [(float(i)/float(j)) * 100 for i,j in zip(totalfbp, totalf)] 
			Totalpcbp = totalpcbp + totalmpcbp + totalfpcbp	
			for i in range(len(Totalpcbp)):
				Totalpcbp[i] = '' + str(Total[i]) + ''
#code processing white data

		if current_id == "B17001A":
                        if items[3] == "1":
				items[5] = items[5].replace(",", "")
                                white.append(items[5])
			if items[3] == "2":
                                items[5] = items[5].replace(",", "")
                                whitebp.append(items[5])
                        if int(items[3]) in range(4,17):
                                whitembp.append(items[5])
                                for i in range(len(whitembp)):
                                        whitembp[i] = whitembp[i].replace(",", "")
                        if int(items[3]) in range(18,31):
                                whitefbp.append(items[5])
                                for i in range(len(whitefbp)):
                                        whitefbp[i] = whitefbp[i].replace(",", "")
                        if int(items[3]) in range(33,46):
                                whitemap.append(items[5])
                                for i in range(len(whitemap)):
                                        whitemap[i] = whitemap[i].replace(",", "")
                        if int(items[3]) in range(47,60):
                                whitefap.append(items[5])
                                for i in range(len(whitefap)):
                                        whitefap[i] = whitefap[i].replace(",", "")
                        whitem = [int(i)+int(j) for i,j in zip(whitemap, whitembp)]
                        whitef = [int(i)+int(j) for i,j in zip(whitefap, whitefbp)]
                        White = white + whitem + whitef
			for i in range(len(White)):
				White[i] = '' + str(White[i]) + ''
			whitepcbp = [(float(i)/float(j)) * 100 for i,j in zip(whitebp, white)]
                        whitempcbp = [(float(i)/float(j)) * 100 for i,j in zip(whitembp, whitem)]
                        whitefpcbp = [(float(i)/float(j)) * 100 for i,j in zip(whitefbp, whitef)]                
                        Whitepcbp = whitepcbp + whitempcbp + whitefpcbp
			for i in range(len(Whitepcbp)):
				Whitepcbp[i] = '' + str(White[i]) + ''			

#code processing black or african american alone data

		if current_id == "B17001B":
                        if items[3] == "1":
				items[5] = items[5].replace(",", "")
                                black.append(items[5])
			if items[3] == "2":
                                items[5] = items[5].replace(",", "")
                                blackbp.append(items[5])
                        if int(items[3]) in range(4,17):
                                blackmbp.append(items[5])
                                for i in range(len(blackmbp)):
                                        blackmbp[i] = blackmbp[i].replace(",", "")
                        if int(items[3]) in range(18,31):
                                blackfbp.append(items[5])
                                for i in range(len(blackfbp)):
                                        blackfbp[i] = blackfbp[i].replace(",", "")
                        if int(items[3]) in range(33,46):
                                blackmap.append(items[5])
                                for i in range(len(blackmap)):
                                        blackmap[i] = blackmap[i].replace(",", "")
                        if int(items[3]) in range(47,60):
                                blackfap.append(items[5])
                                for i in range(len(blackfap)):
                                        blackfap[i] = blackfap[i].replace(",", "")
                        blackm = [int(i)+int(j) for i,j in zip(blackmap, blackmbp)]
                        blackf = [int(i)+int(j) for i,j in zip(blackfap, blackfbp)]
                        Black = black + blackm + blackf
			for i in range(len(Black)):
				Black[i] = '' + str(Black[i]) + ''
			blackpcbp = [(float(i)/float(j)) * 100 for i,j in zip(blackbp, black)]
                        blackmpcbp = [(float(i)/float(j)) * 100 for i,j in zip(blackmbp, blackm)]
                        blackfpcbp = [(float(i)/float(j)) * 100 for i,j in zip(blackfbp, blackf)]
                        Blackpcbp = blackpcbp + blackmpcbp + blackfpcbp
			for i in range(len(Blackpcbp)):
				Blackpcbp[i] = '' + str(Blackpcbp[i]) + ''

#code processing american indian and alaskas native alone data

		if current_id == "B17001C":
                        if items[3] == "1":
				items[5] = items[5].replace(",", "")
                                indian.append(items[5])
			if items[3] == "2":
                                items[5] = items[5].replace(",", "")
                                indianbp.append(items[5])
                        if int(items[3]) in range(4,17):
                                indianmbp.append(items[5])
                                for i in range(len(indianmbp)):
                                        indianmbp[i] = indianmbp[i].replace(",", "")
                        if int(items[3]) in range(18,31):
                                indianfbp.append(items[5])
                                for i in range(len(indianfbp)):
                                        indianfbp[i] = indianfbp[i].replace(",", "")
                        if int(items[3]) in range(33,46):
                                indianmap.append(items[5])
                                for i in range(len(indianmap)):
                                        indianmap[i] = indianmap[i].replace(",", "")
                        if int(items[3]) in range(47,60):
                                indianfap.append(items[5])
                                for i in range(len(indianfap)):
                                        indianfap[i] = indianfap[i].replace(",", "")
                        indianm = [int(i)+int(j) for i,j in zip(indianmap, indianmbp)]
                        indianf = [int(i)+int(j) for i,j in zip(indianfap, indianfbp)]
                        Indian = indian + indianm + indianf
			for i in range(len(Indian)):
				Indian[i] = '' + str(Indian[i]) + ''
			indianpcbp = [(float(i)/float(j)) * 100 for i,j in zip(indianbp, indian)]
                        indianmpcbp = [(float(i)/float(j)) * 100 for i,j in zip(indianmbp, indianm)]
                        indianfpcbp = [(float(i)/float(j)) * 100 for i,j in zip(indianfbp, indianf)]
                        Indianpcbp = indianpcbp + indianmpcbp + indianfpcbp
			for i in range(len(Indianpcbp)):
				Indianpcbp[i] = '' + str(Indianpcbp[i]) + ''

#code processing asian alone data

		if current_id == "B17001D":
                        if items[3] == "1":
                                items[5] = items[5].replace(",", "")
                                asian.append(items[5])
			if items[3] == "2":
                                items[5] = items[5].replace(",", "")
                                asianbp.append(items[5])
                        if int(items[3]) in range(4,17):
                                asianmbp.append(items[5])
                                for i in range(len(asianmbp)):
                                        asianmbp[i] = asianmbp[i].replace(",", "")
                        if int(items[3]) in range(18,31):
                                asianfbp.append(items[5])
                                for i in range(len(asianfbp)):
                                        asianfbp[i] = asianfbp[i].replace(",", "")
                        if int(items[3]) in range(33,46):
                               	asianmap.append(items[5])
                                for i in range(len(asianmap)):
                                        asianmap[i] = asianmap[i].replace(",", "")
                        if int(items[3]) in range(47,60):
                                asianfap.append(items[5])
                                for i in range(len(asianfap)):
                                        asianfap[i] = asianfap[i].replace(",", "")
                        asianm = [int(i)+int(j) for i,j in zip(asianmap, asianmbp)]
                        asianf = [int(i)+int(j) for i,j in zip(asianfap, asianfbp)]
                        Asian = asian + asianm + asianf
			for i in range(len(Asian)):
				Asian[i] = '' + str(Asian[i]) + ''
			asianpcbp = [(float(i)/float(j)) * 100 for i,j in zip(asianbp, asian)]
                        asianmpcbp = [(float(i)/float(j)) * 100 for i,j in zip(asianmbp, asianm)]
                        asianfpcbp = [(float(i)/float(j)) * 100 for i,j in zip(asianfbp, asianf)]
                        Asianpcbp = asianpcbp + asianmpcbp + asianfpcbp
			for i in range(len(Asianpcbp)):
				Asianpcbp[i] = '' + str(Asianpcbp[i]) + ''

#code processing native hawaiian and other pacirfic islander alone data

		if current_id == "B17001E":
                        if items[3] == "1":
                                items[5] = items[5].replace(",", "")
                                pacific.append(items[5])
			if items[3] == "2":
                                items[5] = items[5].replace(",", "")
                                pacificbp.append(items[5])
                        if int(items[3]) in range(4,17):
                                pacificmbp.append(items[5])
                                for i in range(len(pacificmbp)):
                                        pacificmbp[i] = pacificmbp[i].replace(",", "")
                        if int(items[3]) in range(18,31):
                                pacificfbp.append(items[5])
                                for i in range(len(pacificfbp)):
                                        pacificfbp[i] = pacificfbp[i].replace(",", "")
                        if int(items[3]) in range(33,46):
                                pacificmap.append(items[5])
                                for i in range(len(pacificmap)):
                                        pacificmap[i] = pacificmap[i].replace(",", "")
                        if int(items[3]) in range(47,60):
                                pacificfap.append(items[5])
                                for i in range(len(pacificfap)):
                                        pacificfap[i] = pacificfap[i].replace(",", "")
                        pacificm = [int(i)+int(j) for i,j in zip(pacificmap, pacificmbp)]
                        pacificf = [int(i)+int(j) for i,j in zip(pacificfap, pacificfbp)]
                        Pacific = pacific + pacificm + pacificf
			for i in range(len(Pacific)):
				Pacific[i] = '' + str(Pacific[i]) + ''
			pacificpcbp = [(float(i)/float(j)) * 100 for i,j in zip(pacificbp, pacific)]
                        pacificmpcbp = [(float(i)/float(j)) * 100 for i,j in zip(pacificmbp, pacificm)]
                        pacificfpcbp = [(float(i)/float(j)) * 100 for i,j in zip(pacificfbp, pacificf)]
                        Pacificpcbp = pacificpcbp + pacificmpcbp + pacificfpcbp
			for i in range(len(Pacificpcbp)):
				Pacificpcbp[i] = '' + str(Pacificpcbp[i]) + ''

#code processing some other race alone data

		if current_id == "B17001F":
                        if items[3] == "1":
                                items[5] = items[5].replace(",", "")
                                other.append(items[5])
			if items[3] == "2":
                                items[5] = items[5].replace(",", "")
                                otherbp.append(items[5])
                        if int(items[3]) in range(4,17):
                                othermbp.append(items[5])
                                for i in range(len(othermbp)):
                                        othermbp[i] = othermbp[i].replace(",", "")
                        if int(items[3]) in range(18,31):
                                otherfbp.append(items[5])
                                for i in range(len(otherfbp)):
                                        otherfbp[i] = otherfbp[i].replace(",", "")
                        if int(items[3]) in range(33,46):
                                othermap.append(items[5])
                                for i in range(len(othermap)):
                                        othermap[i] = othermap[i].replace(",", "")
                        if int(items[3]) in range(47,60):
                                otherfap.append(items[5])
                                for i in range(len(otherfap)):
                                        otherfap[i] = otherfap[i].replace(",", "")
                        otherm = [int(i)+int(j) for i,j in zip(othermap, othermbp)]
                        otherf = [int(i)+int(j) for i,j in zip(otherfap, otherfbp)]
                        Other = other + otherm + otherf
			for i in range(len(Other)):
				Other[i] = '' + str(Other[i]) + ''
			otherpcbp = [(float(i)/float(j)) * 100 for i,j in zip(otherbp, other)]
                        othermpcbp = [(float(i)/float(j)) * 100 for i,j in zip(othermbp, otherm)]
                        otherfpcbp = [(float(i)/float(j)) * 100 for i,j in zip(otherfbp, otherf)]
                        Otherpcbp = otherpcbp + othermpcbp + otherfpcbp
			for i in range(len(Otherpcbp)):
				Otherpcbp[i] = '' + str(Otherpcbp[i]) + ''


#code processing two or more races data

		if current_id == "B17001G":
                        if items[3] == "1":
                                items[5] = items[5].replace(",", "")
                                two.append(items[5])	
			if items[3] == "2":
                                items[5] = items[5].replace(",", "")
                                twobp.append(items[5])
                        if int(items[3]) in range(4,17):
                                twombp.append(items[5])
                                for i in range(len(twombp)):
                                        twombp[i] = twombp[i].replace(",", "")
                        if int(items[3]) in range(18,31):
                                twofbp.append(items[5])
                                for i in range(len(twofbp)):
                                        twofbp[i] = twofbp[i].replace(",", "")
                        if int(items[3]) in range(33,46):
                                twomap.append(items[5])
                                for i in range(len(twomap)):
                                        twomap[i] = twomap[i].replace(",", "")
                        if int(items[3]) in range(47,60):
                                twofap.append(items[5])
                                for i in range(len(twofap)):
                                        twofap[i] = twofap[i].replace(",", "")
                       	twom = [int(i)+int(j) for i,j in zip(twomap, twombp)]
                        twof = [int(i)+int(j) for i,j in zip(twofap, twofbp)]
                        Two = two + twom + twof
			for i in range(len(Two)):
				Two[i] = '' + str(Two[i]) + ''
			twopcbp = [(float(i)/float(j)) * 100 for i,j in zip(twobp, two)]
                        twompcbp = [(float(i)/float(j)) * 100 for i,j in zip(twombp, twom)]
                        twofpcbp = [(float(i)/float(j)) * 100 for i,j in zip(twofbp, twof)]
                        Twopcbp = twopcbp + twompcbp + twofpcbp
			for i in range(len(Twopcbp)):
				Twopcbp[i] = '' + str(Twopcbp[i]) + ''
#code processing white alone, not hispanic or latino data

		if current_id == "B17001H":
                        if items[3] == "1":
                                items[5] = items[5].replace(",", "")
                                alone.append(items[5])
			if items[3] == "2":
                                items[5] = items[5].replace(",", "")
                                alonebp.append(items[5])
                        if int(items[3]) in range(4,17):
                                alonembp.append(items[5])
                                for i in range(len(alonembp)):
                                        alonembp[i] = alonembp[i].replace(",", "")
                        if int(items[3]) in range(18,31):
                                alonefbp.append(items[5])
                                for i in range(len(alonefbp)):
                                        alonefbp[i] = alonefbp[i].replace(",", "")
                        if int(items[3]) in range(33,46):
                                alonemap.append(items[5])
                                for i in range(len(alonemap)):
                                        alonemap[i] = alonemap[i].replace(",", "")
                        if int(items[3]) in range(47,60):
                                alonefap.append(items[5])
                                for i in range(len(alonefap)):
                                        alonefap[i] = alonefap[i].replace(",", "")
                        alonem = [int(i)+int(j) for i,j in zip(alonemap, alonembp)]
                        alonef = [int(i)+int(j) for i,j in zip(alonefap, alonefbp)]
                        Alone = alone + alonem + alonef
			for i in range(len(Alone)):
				Alone[i] = '' + str(Alone[i]) + ''
			alonepcbp = [(float(i)/float(j)) * 100 for i,j in zip(alonebp, alone)]
                        alonempcbp = [(float(i)/float(j)) * 100 for i,j in zip(alonembp, alonem)]
                        alonefpcbp = [(float(i)/float(j)) * 100 for i,j in zip(alonefbp, alonef)]
                        Alonepcbp = alonepcbp + alonepcbp + alonefpcbp
			for i in range(len(Alonepcbp)):
				Alonepcbp[i] = '' + str(Alonepcbp[i]) + ''
	
#code processing hispanic or latino data

		if current_id == "B17001I":
                        if items[3] == "1":
                                items[5] = items[5].replace(",", "")
                                latino.append(items[5])
			if items[3] == "2":
                                items[5] = items[5].replace(",", "")
                                latinobp.append(items[5])
                        if int(items[3]) in range(4,17):
                                latinombp.append(items[5])
                                for i in range(len(latinombp)):
                                        latinombp[i] = latinombp[i].replace(",", "")
                        if int(items[3]) in range(18,31):
                                latinofbp.append(items[5])
                                for i in range(len(latinofbp)):
                                        latinofbp[i] = latinofbp[i].replace(",", "")
                        if int(items[3]) in range(33,46):
                                latinomap.append(items[5])
                                for i in range(len(latinomap)):
                                        latinomap[i] = latinomap[i].replace(",", "")
                        if int(items[3]) in range(47,60):
                                latinofap.append(items[5])
                                for i in range(len(latinofap)):
                                        latinofap[i] = latinofap[i].replace(",", "")
                        latinom = [int(i)+int(j) for i,j in zip(latinomap, latinombp)]
                        latinof = [int(i)+int(j) for i,j in zip(latinofap, latinofbp)]
                        Latino = latino + latinom + latinof
			for i in range(len(Latino)):
				Latino[i] = '' + str(Latino[i]) + ''
			latinopcbp = [(float(i)/float(j)) * 100 for i,j in zip(latinobp, latino)]
                        latinompcbp = [(float(i)/float(j)) * 100 for i,j in zip(latinombp, latinom)]
                        latinofpcbp = [(float(i)/float(j)) * 100 for i,j in zip(latinofbp, latinof)]
                        Latinopcbp = latinopcbp + latinopcbp + latinofpcbp
			for i in range(len(Latinopcbp)):
				Latinopcbp[i] = '' + str(Latinopcbp[i]) + ''

#code returning arrays arranged by race

	data = {'Total' : Total, 'Total %bp' : Totalpcbp, 'White' : White, 'White  %bp' : Whitepcbp, 'African american' : Black, 'African american %bp' : Blackpcbp, 'Native american' : Indian, 'Native american %bp' : Indianpcbp, 'Asian' : Asian, 'Asian %bp' : Asianpcbp, 'Pacific islander' : Pacific, 'Pacific islander %bp' : Pacificpcbp, 'Other race' : Other, 'Other race %bp' : Otherpcbp, 'Two+ races' : Two, 'Two+ races %bp' : Twopcbp, 'White alone' : Alone, 'White alone %bp' : Alonepcbp, 'Hispanic' : Latino, 'Hispanic %bp' : Latinopcbp}

	ans.close()
	print data
	return data

#-------------------------------------------------------------------
# MAIN
#-------------------------------------------------------------------
import pandas as pd
dict = read_headers()
data = read_data(dict)
#read_data(dict)
process_id_data()
