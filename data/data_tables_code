
import string
allTheLetters = string.uppercase
banner = "------------------------------------------------------------------------------------------------------"

# -----------------------------------------------------------
# this function reads headers.txt and returns a dictionary relating the table id to the topic
#-------------------------------------------------------------
def read_headers():
        ins  = open( "/home/bigboy/UCSD-PRJ/UCSD-GOHS-DNHS/data/headers.txt", "r" )
	
	dict = {}
        for line in ins:
                # print line
                line = line.rstrip()
                line = line.lstrip()
                id, title = line.split(" ", 1)
                # print "Id: "  +  id  +  " Title:"  +  title
                dict[id] = title
        # print str(dict)
        return dict

#----------------------------------------------------------------
# this function regulates the spacing of table elements
#-----------------------------------------------------------------
def two_digit_pc(in1):
	if len(in1) == 1:
		in1 = " " + in1 + "%"
	if len(in1) == 2:
		in1 = in1 + "%"
	if len(in1) == 5:
		in1 = " " + in1
	if len(in1) == 6:
		in1 == in1
	return 	in1


#----------------------------------------------------------------
#
#-----------------------------------------------------------------------
def by_sex_by_age_table_line(base_id, category, below, above):
        table_line= category + \
        two_digit_pc(str(int(data_dict[base_id][below])*100 / (int(data_dict[base_id][below])+int(data_dict[base_id][above])))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][below])*100 / (int(data_dict[id][below])+int(data_dict[id][above])))) + "      "
        return table_line

#-----------------------------------------------------------
def process_poverty_by_sex_by_age(title_dict, data_dict):
	base_id="B17001"
	print banner
	print title_dict[base_id] + " (Poverty Rate)"
	print banner
	print "           Total    White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"
	table_line= "  Overall   "+two_digit_pc(str(int(data_dict[base_id]["2"])*100 / int(data_dict[base_id]["1"]))) + "      "
	for a in allTheLetters:
		id = base_id+a
		if id in data_dict:
			table_line = table_line +two_digit_pc(str(int(data_dict[id]["2"])*100 / int(data_dict[id]["1"]))) + "      "
	print table_line

	# male 
	print by_sex_by_age_table_line(base_id, "  Male      ", "3", "32")
	print by_sex_by_age_table_line(base_id, "  <5        ", "4", "33")
	print by_sex_by_age_table_line(base_id, "  5         ", "5", "34")
	print by_sex_by_age_table_line(base_id, "  6-11      ", "6", "35")
	print by_sex_by_age_table_line(base_id, "  12-14     ", "7", "36")
	print by_sex_by_age_table_line(base_id, "  15        ", "8", "37")
	print by_sex_by_age_table_line(base_id, "  16-17     ", "9", "38")
	print by_sex_by_age_table_line(base_id, "  18-24     ", "10", "39")
	print by_sex_by_age_table_line(base_id, "  25-34     ", "11", "40")
	print by_sex_by_age_table_line(base_id, "  35-44     ", "12", "41")
	print by_sex_by_age_table_line(base_id, "  45-54     ", "13", "42")
	print by_sex_by_age_table_line(base_id, "  55-64     ", "14", "43")
	print by_sex_by_age_table_line(base_id, "  65-74     ", "15", "44")
	print by_sex_by_age_table_line(base_id, "  >75       ", "16", "45")	
	print by_sex_by_age_table_line(base_id, "  Female    ", "17", "46")
	print by_sex_by_age_table_line(base_id, "  <5        ", "18", "47")
	print by_sex_by_age_table_line(base_id, "  5         ", "19", "48")
	print by_sex_by_age_table_line(base_id, "  6-11      ", "20", "49")
	print by_sex_by_age_table_line(base_id, "  12-14     ", "21", "50")
	print by_sex_by_age_table_line(base_id, "  15        ", "22", "51")
	print by_sex_by_age_table_line(base_id, "  16-17     ", "23", "52")
	print by_sex_by_age_table_line(base_id, "  18-24     ", "24", "53")
	print by_sex_by_age_table_line(base_id, "  25-34     ", "25", "54")
	print by_sex_by_age_table_line(base_id, "  35-44     ", "26", "55")
	print by_sex_by_age_table_line(base_id, "  45-54     ", "27", "56")
	print by_sex_by_age_table_line(base_id, "  55-64     ", "28", "57")
	print by_sex_by_age_table_line(base_id, "  65-74     ", "29", "58")
	print by_sex_by_age_table_line(base_id, "  >75       ", "30", "59")

	return

#-----------------------------------------------------------------------
#
#----------------------------------------------------------------------
def process_poverty_by_ratio_of_income(title_dict, data_dict):
        base_id="B17002"
        print banner
        print title_dict[base_id] + " (Poverty Distribution)"
        print banner
        print "  Income Ratio:      <  0.50   0.75   1.00   1.25   1.50   1.75   1.85   2.00   3.00   4.00   5.00  >"

	table_line = "  Poverty Distri.:   "
	for i in range(2,100):
		index = str(i);
		if index in data_dict[base_id]:	
			table_line +=  two_digit_pc(str(int(data_dict[base_id][index])*100 / int(data_dict[base_id]["1"])))+ "    "
	print table_line
	return

#-----------------------------------------------------------------------
#
#----------------------------------------------------------------------
def process_poverty_by_sex_by_education(title_dict, data_dict):
        base_id="B17003"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "          Subtotal     <High_school    High_school     Associate     >=Bachelor"

	table_line = " Total:     "
	table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
	for i in range(4,8):
		poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+5)])
		population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+16)]) + poverty;
		table_line += two_digit_pc(str(poverty*100/population)) + "             ";
	print table_line
				
        table_line = "  Male:     "
	population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("14")])
	table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,8):
		population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+11)])
		table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

	table_line = "Female:     "
        population = int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("19")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / population))+"            "

        for i in range(4,8):
		population = int(data_dict[base_id][str(i+5)]) + int(data_dict[base_id][str(i+16)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+5)])*100 / population))+ "             "
        print table_line

        return

#-------------------------------------------------------------------------
#
#-------------------------------------------------------------------------
def process_poverty_by_sex_by_work_experience(title_dict, data_dict):
	base_id="B17004"
	print banner
	print title_dict[base_id] + " (Poverty Rate)"
	print banner
	print "         Subtotal     Full-time_job     Part-time_job     No_job"
	table_line = " Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,7):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+4)])
                population = int(data_dict[base_id][str(i+9)]) + int(data_dict[base_id][str(i+13)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

        table_line = "  Male:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("12")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,7):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+9)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        table_line = "Female:     "
        population = int(data_dict[base_id][str("7")]) + int(data_dict[base_id][str("16")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("7")])*100 / population))+"            "

        for i in range(4,7):
                population = int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+9)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+4)])*100 / population))+ "             "
        print table_line

        return

#---------------------------------------------------------------------------
#
#---------------------------------------------------------------------------
def process_poverty_by_sex_by_employment_status(title_dict, data_dict):
	base_id="B17005"
	print banner
	print title_dict[base_id] + " (Poverty Rate)"
	print banner
	print "        Subtotal     In_labor_force     Employed     Unemployed     Not_in_labor_force"
	table_line = " Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,8):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+5)])
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+16)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

        table_line = "  Male:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("14")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+11)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        table_line = "Female:     "
        population = int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("19")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / population))+"            "

        for i in range(4,8):
                population = int(data_dict[base_id][str(i+5)]) + int(data_dict[base_id][str(i+11)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+5)])*100 / population))+ "             "
        print table_line

        return
#---------------------------------------------------------------------------
#
#---------------------------------------------------------------------------
def process_poverty_children_by_family_type_by_age(title_dict, data_dict):
	base_id="B17006"
	print banner
	print title_dict[base_id] + " (Poverty Rate)"
	print banner
	print "                    Subtotal        <5_years        5_years        6-17_years"
	table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,7):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+5)]) + int(data_dict[base_id][str(i+9)])
                population = int(data_dict[base_id][str(i+9)]) + int(data_dict[base_id][str(i+14)]) + int(data_dict[base_id][str(i+18)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

        table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("17")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,7):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+14)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

	table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("7")]) + int(data_dict[base_id][str("21")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("7")])*100 / population))+"            "

        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("22")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / population))+"            "

        for i in range(4,7):
                population = int(data_dict[base_id][str(i+5)]) + int(data_dict[base_id][str(i+19)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+5)])*100 / population))+ "             "
        print table_line

	table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("12")]) + int(data_dict[base_id][str("26")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("12")])*100 / population))+"            "

        for i in range(4,7):
                population = int(data_dict[base_id][str(i+9)]) + int(data_dict[base_id][str(i+23)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+9)])*100 / population))+ "             "
        print table_line

        return
#-------------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------------
def process_poverty_unrelated_by_sex_by_age(title_dict, data_dict):
	base_id="B17007"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "          Subtotal  15_yrs    16_yrs    18_yrs    25_yrs    35_yrs    45_yrs    55_yrs    65_yrs        >75_yrs"

        table_line = " Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,13):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+10)])
                population = int(data_dict[base_id][str(i+21)]) + int(data_dict[base_id][str(i+31)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "       ";
        print table_line

        table_line = "  Male:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("24")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,13):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+21)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "       "
        print table_line

        table_line = "Female:     "
        population = int(data_dict[base_id][str("13")]) + int(data_dict[base_id][str("34")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("13")])*100 / population))+"            "

        for i in range(4,13):
                population = int(data_dict[base_id][str(i+10)]) + int(data_dict[base_id][str(i+31)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+10)])*100 / population))+ "       "
        print table_line

        return
#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def income_deficit_unrelated_by_sex(title_dict, data_dict):
	base_id="B17008"
	print banner
	print title_dict[base_id] + " (Distribution)"	
	print banner
	print "           Deficit Percentage"

	table_line = "  Male:    "
	table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))
	print table_line

	table_line = "Female:    "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / int(data_dict[base_id][str("1")])))
        print table_line
	
	return
#-----------------------------------------------------------------------
#
#-----------------------------------------------------------------------
def process_poverty_unrelated_by_work_by_householder(title_dict, data_dict):
	base_id="B17009"
	print banner
	print title_dict[base_id] + " (Poverty Rate)"
	print banner
	print "                     Subtotal  Nonfamily_householder  Other"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,6):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+3)]) + int(data_dict[base_id][str(i+6)])
                population = int(data_dict[base_id][str(i+10)]) + int(data_dict[base_id][str(i+13)]) + int(data_dict[base_id][str(i+16)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

        table_line = "  Worked_full-time:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("13")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,6):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+11)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        table_line = "  Worked_part-time:     "
        population = int(data_dict[base_id][str("6")]) + int(data_dict[base_id][str("16")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("6")])*100 / population))+"            "

        for i in range(4,6):
                population = int(data_dict[base_id][str(i+3)]) + int(data_dict[base_id][str(i+13)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+3)])*100 / population))+ "             "
        print table_line

	table_line = "      Did_not_work:     "
        population = int(data_dict[base_id][str("9")]) + int(data_dict[base_id][str("19")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / population))+"            "

        for i in range(4,6):
                population = int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+16)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+6)])*100 / population))+ "             "
        print table_line

        return
#------------------------------------------------------------------------------------------
def by_type_by_children_table_line(base_id, category, below, above):
        table_line= category + ":  "+ \
        two_digit_pc(str(int(data_dict[base_id][below])*100 / (int(data_dict[base_id][below])+int(data_dict[base_id][above])))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][below])*100 / (int(data_dict[id][below])+int(data_dict[id][above])))) + "      "
        return table_line

#------------------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------------------
def process_poverty_families_by_type_by_children(title_dict, data_dict):
	base_id="B17010"
	print banner 
	print title_dict[base_id] + " (Poverty Rate)"
	print banner	
	print "                    Total    White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"
        table_line= "           Overall:  "+two_digit_pc(str(int(data_dict[base_id]["2"])*100 / int(data_dict[base_id]["1"]))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line +two_digit_pc(str(int(data_dict[id]["2"])*100 / int(data_dict[id]["1"]))) + "      "
        print table_line
#-----------------------------------------------------------------------------------------
#
#----------------------------------------------------------------------------------------
	print by_type_by_children_table_line(base_id, "    Married-couple", "3", "23")
	print by_type_by_children_table_line(base_id, "       w/ children", "4", "24")
	print by_type_by_children_table_line(base_id, "     <5 years only", "5", "25")
	print by_type_by_children_table_line(base_id, "   <5 and 5-17 yrs", "6", "26")
	print by_type_by_children_table_line(base_id, "     5-17 yrs only", "7", "27")
	print by_type_by_children_table_line(base_id, "       no children", "8", "28")
	print by_type_by_children_table_line(base_id, "      Other family", "9", "29")
	print by_type_by_children_table_line(base_id, "  Male householder", "10", "30")
	print by_type_by_children_table_line(base_id, "       w/ children", "11", "31")
	print by_type_by_children_table_line(base_id, "     <5 years only", "12", "32")
	print by_type_by_children_table_line(base_id, "   <5 and 5-17 yrs", "13", "33")
	print by_type_by_children_table_line(base_id, "     5-17 yrs only", "14", "34")
	print by_type_by_children_table_line(base_id, "       no children", "15", "35")
	print by_type_by_children_table_line(base_id, "Female householder", "16", "36")
	print by_type_by_children_table_line(base_id, "       w/ children", "17", "37")
	print by_type_by_children_table_line(base_id, "     <5 years only", "18", "38")
	print by_type_by_children_table_line(base_id, "   <5 and 5-17 yrs", "19", "39")
	print by_type_by_children_table_line(base_id, "     5-17 yrs only", "20", "40")
	print by_type_by_children_table_line(base_id, "       no children", "21", "41")
	return
#---------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------
def income_deficit_families_by_type(title_dict, data_cit):
        base_id="B17011"
        print banner
        print title_dict[base_id] + " (Distribution)"
	print banner
	print "                    Deficit Percentage"

        table_line = "    Married-couple:      "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))
        print table_line

        table_line = "      Other family:      "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / int(data_dict[base_id][str("1")])))
        print table_line

	table_line = "  Male householder:      "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / int(data_dict[base_id][str("1")])))
        print table_line
	
	table_line = "Female householder:      "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("5")])*100 / int(data_dict[base_id][str("1")])))
        print table_line

        return
#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def process_poverty_families_by_type_by_children(title_dict, data_dict):
	base_id="B17012"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                    Subtotal        No_child    1-2_children    3-4_children    >=5_children"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,8):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+11)])
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+17)]) + int(data_dict[base_id][str(i+22)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("20")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+17)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

	table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("25")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / population))+"            "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("9")]) + int(data_dict[base_id][str("26")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+23)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+6)])*100 / population))+ "             "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("14")]) + int(data_dict[base_id][str("31")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("14")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+28)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+11)])*100 / population))+ "             "
        print table_line

        return
#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
def process_poverty_families_by_type_by_persons(title_dict, data_dict):
        base_id="B17013"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal        2 people      3-4 people      5-6 people      >=7 people"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,8):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+11)])
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+17)]) + int(data_dict[base_id][str(i+22)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("20")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+17)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("25")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / population))+"            "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("9")]) + int(data_dict[base_id][str("26")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+23)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+6)])*100 / population))+ "             "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("14")]) + int(data_dict[base_id][str("31")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("14")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+28)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+11)])*100 / population))+ "             "
        print table_line

        return
#--------------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------------
def process_poverty_families_by_type_by_workers(title_dict, data_dict):
        base_id="B17014"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal        No workers      1 worker      2 workers      >=3 workers"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,8):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+11)])
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+17)]) + int(data_dict[base_id][str(i+22)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line
	
	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("20")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+17)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("25")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / population))+"            "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("9")]) + int(data_dict[base_id][str("26")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+23)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+6)])*100 / population))+ "             "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("14")]) + int(data_dict[base_id][str("31")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("14")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+28)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+11)])*100 / population))+ "             "
        print table_line

        return
#---------------------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------------------
def process_poverty_families_by_social_security(title_dict, data_dict):
        base_id="B17015"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal     w/ Soc Sec  w/ SSI/cash  w/o SSI/cash  w/o Soc Sec  w/ SSI/cash  w/o SSI/cash"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"          "
        for i in range(4,10):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+8)]) + int(data_dict[base_id][str(i+15)])
                population = int(data_dict[base_id][str(i+23)]) + int(data_dict[base_id][str(i+31)]) + int(data_dict[base_id][str(i+38)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "           ";
        print table_line

        table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("26")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"          "
        for i in range(4,10):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+23)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "           "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("10")]) + int(data_dict[base_id][str("33")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("10")])*100 / population))+"          "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("11")]) + int(data_dict[base_id][str("34")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("11")])*100 / population))+"          "
        for i in range(4,10):
                population = int(data_dict[base_id][str(i+8)]) + int(data_dict[base_id][str(i+31)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+8)])*100 / population))+ "           "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("18")]) + int(data_dict[base_id][str("41")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("18")])*100 / population))+"          "
        for i in range(4,10):
                population = int(data_dict[base_id][str(i+15)]) + int(data_dict[base_id][str(i+38)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+15)])*100 / population))+ "           "
        print table_line

        return
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
def process_poverty_families_by_type_by_work(title_dict, data_dict):
	base_id="B17016"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                        Subtotal    spouse full-time  spouse part-time  spouse no work"
        table_line = "       Married-couple:   "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / (int(data_dict[base_id][str("26")]) + int(data_dict[base_id][str("1")]))))+"              "
        for i in range(5,8):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+8)])
                population = int(data_dict[base_id][str(i+23)]) + int(data_dict[base_id][str(i+27)]) + int(data_dict[base_id][str(i+31)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

	table_line = "householder full-time:   "
        population = int(data_dict[base_id][str("4")]) + int(data_dict[base_id][str("27")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+"              "
        for i in range(5,8):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+23)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

	table_line = "householder part-time:   "
        population = int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("31")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / population))+"              "
        for i in range(5,8):
                population = int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+27)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+4)])*100 / population))+ "             "
        print table_line

	table_line = "  householder no work:   "
        population = int(data_dict[base_id][str("12")]) + int(data_dict[base_id][str("35")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("12")])*100 / population))+"              "
        for i in range(5,8):
                population = int(data_dict[base_id][str(i+8)]) + int(data_dict[base_id][str(i+31)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+8)])*100 / population))+ "             "
        print table_line

	print "                       Subtotal     householder full-time  householder part-time  householder no work"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"                    "
        for i in range(18,21):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+4)])
                population = int(data_dict[base_id][str(i+23)]) + int(data_dict[base_id][str(i+27)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "                 ";
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("16")]) + int(data_dict[base_id][str("39")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("16")])*100 / population))+"                "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("17")]) + int(data_dict[base_id][str("40")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("17")])*100 / population))+"                    "
        for i in range(18,21):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+23)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                 "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("21")]) + int(data_dict[base_id][str("44")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("21")])*100 / population))+"                    "
        for i in range(18,21):
                population = int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+27)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+4)])*100 / population))+ "                 "
        print table_line


	return
#------------------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------------------
def process_poverty_household_by_age(title_dict, data_dict):
	base_id="B17017"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                    Subtotal   <25   25-44   45-64   >=65"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"    "
        for i in range(5,9):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+17)]) + int(data_dict[base_id][str(i+22)])
                population = int(data_dict[base_id][str(i+29)]) + int(data_dict[base_id][str(i+35)]) + int(data_dict[base_id][str(i+40)]) + int(data_dict[base_id][str(i+46)]) + int(data_dict[base_id][str(i+51)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "    ";
        print table_line

        table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("4")]) + int(data_dict[base_id][str("33")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+"    "
        for i in range(5,9):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+23)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "    "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("9")]) + int(data_dict[base_id][str("38")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / population))+"    "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("10")]) + int(data_dict[base_id][str("39")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("10")])*100 / population))+"    "
        for i in range(5,9):
                population = int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+35)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+6)])*100 / population))+ "    "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("15")]) + int(data_dict[base_id][str("44")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("15")])*100 / population))+"    "
        for i in range(5,9):
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+40)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+11)])*100 / population))+ "    "
        print table_line

	table_line = "   Non-family Male:     "
        population = int(data_dict[base_id][str("21")]) + int(data_dict[base_id][str("50")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("21")])*100 / population))+"    "
        for i in range(5,9):
                population = int(data_dict[base_id][str(i+17)]) + int(data_dict[base_id][str(i+46)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+17)])*100 / population))+ "    "
        print table_line

	table_line = " Non-family Female:     "
	population = int(data_dict[base_id][str("26")]) + int(data_dict[base_id][str("55")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("26")])*100 / population))+"    "
        for i in range(5,9):
                population = int(data_dict[base_id][str(i+22)]) + int(data_dict[base_id][str(i+51)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+22)])*100 / population))+ "    "
        print table_line

        return
#------------------------------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------------------------------
def process_poverty_families_by_type_by_education(title_dict, data_dict):
	base_id="B17018"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal    <High_school    High_school    Associate    >=Bachelor"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"          "
        for i in range(4,8):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+11)])
                population = int(data_dict[base_id][str(i+16)]) + int(data_dict[base_id][str(i+22)]) + int(data_dict[base_id][str(i+27)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "           ";
        print table_line

        table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("20")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"          "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+17)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "           "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("25")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / population))+"          "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("9")]) + int(data_dict[base_id][str("26")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / population))+"          "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+23)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+6)])*100 / population))+ "           "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("14")]) + int(data_dict[base_id][str("31")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("14")])*100 / population))+"          "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+28)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+11)])*100 / population))+ "           "
        print table_line

        return

#--------------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------------
def process_poverty_families_by_type_by_tenure(title_dict, data_dict):	
	base_id="B17019"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal    Owner_occupied    Renter_occupied"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"              "
        for i in range(4,6):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+7)])
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+15)]) + int(data_dict[base_id][str(i+18)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "               ";
        print table_line

        table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("14")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"              "
        for i in range(4,6):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+11)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "               "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("6")]) + int(data_dict[base_id][str("17")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("6")])*100 / population))+"              "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("7")]) + int(data_dict[base_id][str("18")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("7")])*100 / population))+"              "
        for i in range(4,6):
                population = int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+15)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+4)])*100 / population))+ "               "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("10")]) + int(data_dict[base_id][str("21")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("10")])*100 / population))+"              "
        for i in range(4,6):
                population = int(data_dict[base_id][str(i+7)]) + int(data_dict[base_id][str(i+18)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+7)])*100 / population))+ "               "
        print table_line

        return
#------------------------------------------------------------------------------------------
def by_race_by_age_table_line(base_id, category, below, above):
        table_line= category
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][below])*100 / (int(data_dict[id][below])+int(data_dict[id][above])))) + "      "
        return table_line

#------------------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------------------
def process_poverty_by_age_by_race(title_dict, data_dict):
        base_id="B17020"
        print banner
        print "POVERTY STATUS IN THE PAST 12 MONTHS BY AGE" + " (Poverty Rate)"
        print banner
        print "            White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"
        table_line= " Overall     "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line +two_digit_pc(str(int(data_dict[id]["2"])*100 / int(data_dict[id]["1"]))) + "      "
        print table_line

	print by_race_by_age_table_line(base_id, "    <5       ", "3", "11")
	print by_race_by_age_table_line(base_id, "     5       ", "4", "12")
	print by_race_by_age_table_line(base_id, "  6-11       ", "5", "13")
	print by_race_by_age_table_line(base_id, " 12-17       ", "6", "14")
	print by_race_by_age_table_line(base_id, " 18-64       ", "7", "15")
	print by_race_by_age_table_line(base_id, " 65-74       ", "8", "16")
	print by_race_by_age_table_line(base_id, "  >=75       ", "9", "17")

	return	
#------------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------------
def process_poverty_individuals_by_living(title_dict, data_dict):
	base_id="B17021"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
	print "In family households:"
        print "                       Subtotal    All_relatives    Non_relatives"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"              "
        for i in range(5,7):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+7)])
                population = int(data_dict[base_id][str(i+17)]) + int(data_dict[base_id][str(i+21)]) + int(data_dict[base_id][str(i+24)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "               ";
        print table_line

	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("4")]) + int(data_dict[base_id][str("21")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+"              "
        for i in range(5,7):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+17)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "               "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("7")]) + int(data_dict[base_id][str("24")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("7")])*100 / population))+"              "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("25")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / population))+"              "
        for i in range(5,7):
                population = int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+21)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+4)])*100 / population))+ "               "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("11")]) + int(data_dict[base_id][str("28")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("11")])*100 / population))+"              "
        for i in range(5,7):
                population = int(data_dict[base_id][str(i+7)]) + int(data_dict[base_id][str(i+24)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+7)])*100 / population))+ "               "
        print table_line
	print " "
	print "In non-family households:"
	
	print "                       Subtotal    Householder  Living_alone  Not_alone  Other"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("14")])*100 / (int(data_dict[base_id][str("14")]) + int(data_dict[base_id][str("31")]))))+"         "
        for i in range(15,19):
                poverty = int(data_dict[base_id][str(i)])
                population = int(data_dict[base_id][str(i+17)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "          ";
        print table_line

        return
#---------------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------------
def process_ratio_of_income_by_family_type(title_dict, data_dict):
	base_id="B17022"
        print banner
        print title_dict[base_id] + " (Poverty Distribution)"
        print banner
	print "Under 1.30"
        print "                       Subtotal    <5_years     <5 + 5-17_yrs    5-17_years    no_children"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"           "
        for i in range(5,9):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+7)]) + int(data_dict[base_id][str(i+13)])
                population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("9")]);
                table_line += two_digit_pc(str(poverty*100/population)) + "           ";
        print table_line

	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) 
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / int(data_dict[base_id][str("2")])))+"           "
        for i in range(5,9):
                population = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / int(data_dict[base_id][str("3")])))+ "           "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("9")]) 
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / int(data_dict[base_id][str("2")])))+"           "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("10")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("10")])*100 / int(data_dict[base_id][str("2")])))+"           "
        for i in range(5,9):
                population = int(data_dict[base_id][str(i+7)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+7)])*100 / int(data_dict[base_id][str("10")])))+ "           "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("16")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("16")])*100 / int(data_dict[base_id][str("2")])))+"           "
        for i in range(5,9):
                population = int(data_dict[base_id][str(i+13)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+13)])*100 / int(data_dict[base_id][str("16")])))+ "           "
        print table_line
	print " "
	print "1.30 to 1.49"
	print "                       Subtotal    <5_years     <5 + 5-17_yrs    5-17_years    no_children"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("22")])*100 / int(data_dict[base_id][str("1")])))+"           "
        for i in range(25,29):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+7)]) + int(data_dict[base_id][str(i+13)])
                population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("9")]);
                table_line += two_digit_pc(str(poverty*100/population)) + "           ";
        print table_line

	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("23")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("23")])*100 / int(data_dict[base_id][str("22")])))+"           "
        for i in range(25,29):
                population = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / int(data_dict[base_id][str("23")])))+ "           "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("29")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("29")])*100 / int(data_dict[base_id][str("22")])))+"           "
        print table_line
        
        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("30")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("30")])*100 / int(data_dict[base_id][str("22")])))+"           "
        for i in range(25,29):
                population = int(data_dict[base_id][str(i+7)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+7)])*100 / int(data_dict[base_id][str("30")])))+ "           "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("36")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("36")])*100 / int(data_dict[base_id][str("22")])))+"           "
        for i in range(25,29):
                population = int(data_dict[base_id][str(i+13)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+13)])*100 / int(data_dict[base_id][str("36")])))+ "           "
        print table_line
	print " "
        print "1.50 to 1.84"
        print "                       Subtotal    <5_years     <5 + 5-17_yrs    5-17_years    no_children"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("42")])*100 / int(data_dict[base_id][str("1")])))+"           "
        for i in range(45,49):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+7)]) + int(data_dict[base_id][str(i+13)])
                population = int(data_dict[base_id][str("43")]) + int(data_dict[base_id][str("49")]);
                table_line += two_digit_pc(str(poverty*100/population)) + "           ";

        print table_line
	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("43")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("43")])*100 / int(data_dict[base_id][str("42")])))+"           "
        for i in range(45,49):
                population = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / int(data_dict[base_id][str("43")])))+ "           "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("49")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("49")])*100 / int(data_dict[base_id][str("42")])))+"           "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("50")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("50")])*100 / int(data_dict[base_id][str("42")])))+"           "
        for i in range(45,49):
                population = int(data_dict[base_id][str(i+7)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+7)])*100 / int(data_dict[base_id][str("50")])))+ "           "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("56")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("56")])*100 / int(data_dict[base_id][str("42")])))+"           "
        for i in range(45,49):
                population = int(data_dict[base_id][str(i+13)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+13)])*100 / int(data_dict[base_id][str("56")])))+ "           "
        print table_line
	print " "
        print "1.85 and above"
        print "                       Subtotal    <5_years     <5 + 5-17_yrs    5-17_years    no_children"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("62")])*100 / int(data_dict[base_id][str("1")])))+"           "
        for i in range(65,69):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+7)]) + int(data_dict[base_id][str(i+13)])
                population = int(data_dict[base_id][str("63")]) + int(data_dict[base_id][str("69")]);
                table_line += two_digit_pc(str(poverty*100/population)) + "           ";

	print table_line
        table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("63")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("63")])*100 / int(data_dict[base_id][str("62")])))+"           "
        for i in range(65,69):
                population = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / int(data_dict[base_id][str("63")])))+ "           "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("69")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("69")])*100 / int(data_dict[base_id][str("62")])))+"          "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("70")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("70")])*100 / int(data_dict[base_id][str("62")])))+"           "
        for i in range(65,69):
                population = int(data_dict[base_id][str(i+7)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+7)])*100 / int(data_dict[base_id][str("70")])))+ "           "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("76")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("76")])*100 / int(data_dict[base_id][str("62")])))+"           "
        for i in range(65,69):
                population = int(data_dict[base_id][str(i+13)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+13)])*100 / int(data_dict[base_id][str("76")])))+ "           "
        print table_line

        return
#------------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------------
def process_poverty_families_by_type_by_ownchildren(title_dict, data_dict):
	base_id="B17023"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                    Subtotal        No child    1-2 children    3-4 children    >=5 children"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,8):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+11)])
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+17)]) + int(data_dict[base_id][str(i+22)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("20")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+17)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("25")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / population))+"            "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("9")]) + int(data_dict[base_id][str("26")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i+6)]) + int(data_dict[base_id][str(i+23)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+6)])*100 / population))+ "             "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("14")]) + int(data_dict[base_id][str("31")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("14")])*100 / population))+"            "
        for i in range(4,8):
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+28)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+11)])*100 / population))+ "             "
        print table_line

        return
#---------------------------------------------------------------
#
#--------------------------------------------------------------
def process_age_by_ratio_of_income(title_dict, data_dict):
	base_id="B17024"
        print banner
        print title_dict[base_id] + " (Poverty Distribution)"
        print banner
        print "                   Subtotal   <  0.50   0.75   1.00   1.25   1.50   1.75   1.85   2.00   3.00   4.00   5.00  >" 
        table_line = "            Total:             "
        for i in range(3,15):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+13)]) + int(data_dict[base_id][str(i+26)]) + int(data_dict[base_id][str(i+39)]) + int(data_dict[base_id][str(i+52)]) + int(data_dict[base_id][str(i+65)]) + int(data_dict[base_id][str(i+78)]) + int(data_dict[base_id][str(i+91)]) + int(data_dict[base_id][str(i+104)]) + int(data_dict[base_id][str(i+117)])
                population = int(data_dict[base_id][str("2")]) + int(data_dict[base_id][str("15")]) + int(data_dict[base_id][str("28")]) + int(data_dict[base_id][str("41")]) + int(data_dict[base_id][str("54")]) + int(data_dict[base_id][str("67")]) + int(data_dict[base_id][str("80")]) + int(data_dict[base_id][str("93")]) + int(data_dict[base_id][str("106")]) + int(data_dict[base_id][str("119")]);
                table_line += two_digit_pc(str(poverty*100/population)) + "    ";
        print table_line

        table_line = "    Under 6 years:   "
        population = int(data_dict[base_id][str("2")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"       "
        for i in range(3,15):
                population = int(data_dict[base_id][str(i)]) 
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / int(data_dict[base_id][str("2")])))+ "    "
        print table_line

	table_line = "       6-11 years:   "
        population = int(data_dict[base_id][str("15")]) 
        table_line += two_digit_pc(str(int(data_dict[base_id][str("15")])*100 / int(data_dict[base_id][str("1")])))+"       "
        for i in range(3,15):
                population = int(data_dict[base_id][str(i+13)]) 
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+13)])*100 / int(data_dict[base_id][str("15")])))+ "    "
        print table_line
	
	table_line = "      12-17 years:   "
        population = int(data_dict[base_id][str("28")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("28")])*100 / int(data_dict[base_id][str("1")])))+"       "
        for i in range(3,15):
                population = int(data_dict[base_id][str(i+26)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+26)])*100 / int(data_dict[base_id][str("28")])))+ "    "
        print table_line

	table_line = "      18-24 years:   "
        population = int(data_dict[base_id][str("41")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("41")])*100 / int(data_dict[base_id][str("1")])))+"       "
        for i in range(3,15):
                population = int(data_dict[base_id][str(i+39)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+39)])*100 / int(data_dict[base_id][str("41")])))+ "    "
        print table_line

	table_line = "      25-34 years:   "
        population = int(data_dict[base_id][str("54")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("54")])*100 / int(data_dict[base_id][str("1")])))+"       "
        for i in range(3,15):
                population = int(data_dict[base_id][str(i+52)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+52)])*100 / int(data_dict[base_id][str("54")])))+ "    "
        print table_line

	table_line = "      35-44 years:   "
        population = int(data_dict[base_id][str("67")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("67")])*100 / int(data_dict[base_id][str("1")])))+"       "
        for i in range(3,15):
                population = int(data_dict[base_id][str(i+65)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+65)])*100 / int(data_dict[base_id][str("67")])))+ "    "
        print table_line

	table_line = "      45-54 years:   "
        population = int(data_dict[base_id][str("80")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("80")])*100 / int(data_dict[base_id][str("1")])))+"       "
        for i in range(3,15):
                population = int(data_dict[base_id][str(i+78)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+78)])*100 / int(data_dict[base_id][str("80")])))+ "    "
        print table_line

	table_line = "      55-64 years:   "
        population = int(data_dict[base_id][str("93")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("93")])*100 / int(data_dict[base_id][str("1")])))+"       "
        for i in range(3,15):
                population = int(data_dict[base_id][str(i+91)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+91)])*100 / int(data_dict[base_id][str("93")])))+ "    "
        print table_line

	table_line = "      65-74 years:   "
        population = int(data_dict[base_id][str("106")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("106")])*100 / int(data_dict[base_id][str("1")])))+"       "
        for i in range(3,15):
                population = int(data_dict[base_id][str(i+104)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+104)])*100 / int(data_dict[base_id][str("106")])))+ "    "
        print table_line

	table_line = "75 years and over:   "
        population = int(data_dict[base_id][str("119")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("119")])*100 / int(data_dict[base_id][str("1")])))+"       "
        for i in range(3,15):
                population = int(data_dict[base_id][str(i+117)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+117)])*100 / int(data_dict[base_id][str("119")])))+ "    "
        print table_line
        return
	
#-----------------------------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------------------------
def process_poverty_by_nativity(title_dict, data_dict):
	base_id="B17025"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "          Subtotal     Born_in_the_US    Born_outside_US    Naturalized     Not_a_citizen"

        table_line = "   Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,6):
                poverty = int(data_dict[base_id][str(i)]) 
                population = int(data_dict[base_id][str(i+7)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
	for i in range(7,9):
                poverty = int(data_dict[base_id][str(i)]) 
                population = int(data_dict[base_id][str(i+7)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

        table_line = "  Native:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("10")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,6):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+7)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        table_line = " Foreign:     "
        population = int(data_dict[base_id][str("6")]) + int(data_dict[base_id][str("13")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("6")])*100 / population))+"                                            "

        for i in range(7,9):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+7)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        return
#------------------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------------------
def income_by_race_table_line(base_id, category, span, total):
        table_line= category + \
        two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][total]))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][span])*100 / int(data_dict[id][total]))) + "      "
        return table_line

#------------------------------------------------------------------------------------------
def process_income_by_race(title_dict, data_dict):
        base_id="B19001"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                     Total  White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"

	print income_by_race_table_line(base_id, "Less than $10,000    ", "2", "1")		
	print income_by_race_table_line(base_id, "  $10,000-$14,999    ", "3", "1")
	print income_by_race_table_line(base_id, "  $15,000-$19,999    ", "4", "1")
	print income_by_race_table_line(base_id, "  $20,000-$24,999    ", "5", "1")
	print income_by_race_table_line(base_id, "  $25,000-$29,999    ", "6", "1")
	print income_by_race_table_line(base_id, "  $30,000-$34,999    ", "7", "1")
	print income_by_race_table_line(base_id, "  $35,000-$39,999    ", "8", "1")
	print income_by_race_table_line(base_id, "  $40,000-$44,999    ", "9", "1")
	print income_by_race_table_line(base_id, "  $45,000-$49,999    ", "10", "1")
	print income_by_race_table_line(base_id, "  $50,000-$59,999    ", "11", "1")
	print income_by_race_table_line(base_id, "  $60,000-$69,000    ", "12", "1")
	print income_by_race_table_line(base_id, "  $75,000-$99,999    ", "13", "1")
	print income_by_race_table_line(base_id, "$100,000-$124,999    ", "14", "1")
	print income_by_race_table_line(base_id, "$125,000-$149,000    ", "15", "1")
	print income_by_race_table_line(base_id, "$150,000-$199,000    ", "16", "1")
	print income_by_race_table_line(base_id, " $200,000 or more    ", "17", "1")

	return
#-----------------------------------------------------------------------
#
#-----------------------------------------------------------------------
def process_median_household_income(title_dict, data_dict):
	base_id="B19013"
        print banner
        print title_dict[base_id]
        print banner
        print "           Total    White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"
        table_line= "  Overall   " + "$" + str(data_dict[base_id]["1"]) + "   "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + "$" + str(data_dict[id]["1"]) + "   "
        print table_line
	
#-----------------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------------
def process_household_income_by_size(title_dict, data_dict):
	base_id="B19019"
        print banner
        print title_dict[base_id]
        print banner
        print "           Total    1-person  2-people   3-people  4-people   5-people   6-people   7+people"
        table_line= "  Overall  " + "$" + str(data_dict[base_id]["1"]) + "   "
        for i in range(2,9):
                        table_line = table_line + "$" + str(data_dict[base_id][str(i)]) + "     "
        print table_line

#-----------------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------------
def process_aggregate_household_income_by_race(title_dict, data_dict):
	base_id="B19025"
        print banner
        print title_dict[base_id]
        print banner
        print "                  Total      White   African   Native   Asian   Islander   Other   >Two   Caucasian   Hispanic"
        table_line= "  Overall   " + "$" + str(data_dict[base_id]["1"]) + "    "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
			table_line += two_digit_pc(str(int(data_dict[id]["1"])*100 / int(data_dict[base_id]["1"])))+ "      "
        print table_line
#-------------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------------
def householder_age_table_line(base_id, category, span, total):
        table_line= category + \
        two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][total]))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][span])*100 / int(data_dict[id][total]))) + "      "
        return table_line
#----------------------------------------------------------------------------------------
def process_householder_age_by_income(title_dict, data_dict):
        base_id="B19037"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                     Total  White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"
	
	print income_by_race_table_line(base_id, "  Householder <25    ", "2", "1")
        print income_by_race_table_line(base_id, "Less than $10,000    ", "3", "2")
        print income_by_race_table_line(base_id, "  $10,000-$14,999    ", "4", "2")
        print income_by_race_table_line(base_id, "  $15,000-$19,999    ", "5", "2")
        print income_by_race_table_line(base_id, "  $20,000-$24,999    ", "6", "2")
        print income_by_race_table_line(base_id, "  $25,000-$29,999    ", "7", "2")
        print income_by_race_table_line(base_id, "  $30,000-$34,999    ", "8", "2")
        print income_by_race_table_line(base_id, "  $35,000-$39,999    ", "9", "2")
        print income_by_race_table_line(base_id, "  $40,000-$44,999    ", "10", "2")
        print income_by_race_table_line(base_id, "  $45,000-$49,999    ", "11", "2")
        print income_by_race_table_line(base_id, "  $50,000-$59,999    ", "12", "2")
        print income_by_race_table_line(base_id, "  $60,000-$69,000    ", "13", "2")
        print income_by_race_table_line(base_id, "  $75,000-$99,999    ", "14", "2")
        print income_by_race_table_line(base_id, "$100,000-$124,999    ", "15", "2")
        print income_by_race_table_line(base_id, "$125,000-$149,000    ", "16", "2")
        print income_by_race_table_line(base_id, "$150,000-$199,000    ", "17", "2")
        print income_by_race_table_line(base_id, " $200,000 or more    ", "18", "2")
	print " "
	print income_by_race_table_line(base_id, "Householder 25-54    ", "19", "1")
        print income_by_race_table_line(base_id, "Less than $10,000    ", "20", "19")
        print income_by_race_table_line(base_id, "  $10,000-$14,999    ", "21", "19")
        print income_by_race_table_line(base_id, "  $15,000-$19,999    ", "22", "19")
        print income_by_race_table_line(base_id, "  $20,000-$24,999    ", "23", "19")
        print income_by_race_table_line(base_id, "  $25,000-$29,999    ", "24", "19")
        print income_by_race_table_line(base_id, "  $30,000-$34,999    ", "25", "19")
        print income_by_race_table_line(base_id, "  $35,000-$39,999    ", "26", "19")
        print income_by_race_table_line(base_id, "  $40,000-$44,999    ", "27", "19")
        print income_by_race_table_line(base_id, "  $45,000-$49,999    ", "28", "19")
        print income_by_race_table_line(base_id, "  $50,000-$59,999    ", "29", "19")
        print income_by_race_table_line(base_id, "  $60,000-$69,000    ", "30", "19")
        print income_by_race_table_line(base_id, "  $75,000-$99,999    ", "31", "19")
        print income_by_race_table_line(base_id, "$100,000-$124,999    ", "32", "19")
        print income_by_race_table_line(base_id, "$125,000-$149,000    ", "33", "19")
        print income_by_race_table_line(base_id, "$150,000-$199,000    ", "34", "19")
        print income_by_race_table_line(base_id, " $200,000 or more    ", "35", "19")
	print " "
	print income_by_race_table_line(base_id, "Householder 45-64    ", "36", "1")
        print income_by_race_table_line(base_id, "Less than $10,000    ", "37", "36")
        print income_by_race_table_line(base_id, "  $10,000-$14,999    ", "38", "36")
        print income_by_race_table_line(base_id, "  $15,000-$19,999    ", "39", "36")
        print income_by_race_table_line(base_id, "  $20,000-$24,999    ", "40", "36")
        print income_by_race_table_line(base_id, "  $25,000-$29,999    ", "41", "36")
        print income_by_race_table_line(base_id, "  $30,000-$34,999    ", "42", "36")
        print income_by_race_table_line(base_id, "  $35,000-$39,999    ", "43", "36")
        print income_by_race_table_line(base_id, "  $40,000-$44,999    ", "44", "36")
        print income_by_race_table_line(base_id, "  $45,000-$49,999    ", "45", "36")
        print income_by_race_table_line(base_id, "  $50,000-$59,999    ", "46", "36")
        print income_by_race_table_line(base_id, "  $60,000-$69,000    ", "47", "36")
        print income_by_race_table_line(base_id, "  $75,000-$99,999    ", "48", "36")
        print income_by_race_table_line(base_id, "$100,000-$124,999    ", "49", "36")
        print income_by_race_table_line(base_id, "$125,000-$149,000    ", "50", "36")
        print income_by_race_table_line(base_id, "$150,000-$199,000    ", "51", "36")
        print income_by_race_table_line(base_id, " $200,000 or more    ", "52", "36")
	print " "
	print income_by_race_table_line(base_id, " Householder >=65    ", "53", "1")
        print income_by_race_table_line(base_id, "Less than $10,000    ", "54", "53")
        print income_by_race_table_line(base_id, "  $10,000-$14,999    ", "55", "53")
        print income_by_race_table_line(base_id, "  $15,000-$19,999    ", "56", "53")
        print income_by_race_table_line(base_id, "  $20,000-$24,999    ", "57", "53")
        print income_by_race_table_line(base_id, "  $25,000-$29,999    ", "58", "53")
        print income_by_race_table_line(base_id, "  $30,000-$34,999    ", "59", "53")
        print income_by_race_table_line(base_id, "  $35,000-$39,999    ", "60", "53")
        print income_by_race_table_line(base_id, "  $40,000-$44,999    ", "61", "53")
        print income_by_race_table_line(base_id, "  $45,000-$49,999    ", "62", "53")
        print income_by_race_table_line(base_id, "  $50,000-$59,999    ", "63", "53")
        print income_by_race_table_line(base_id, "  $60,000-$69,000    ", "64", "53")
        print income_by_race_table_line(base_id, "  $75,000-$99,999    ", "65", "53")
        print income_by_race_table_line(base_id, "$100,000-$124,999    ", "66", "53")
        print income_by_race_table_line(base_id, "$125,000-$149,000    ", "67", "53")
        print income_by_race_table_line(base_id, "$150,000-$199,000    ", "68", "53")
        print income_by_race_table_line(base_id, " $200,000 or more    ", "69", "53")

        return
#-------------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------------
def process_median_income_by_age(title_dict, data_dict):
        base_id="B19049"
        print banner
        print title_dict[base_id]
        print banner
        print "           Total   Householder_<25   Householder_25-44   Householder_45-64   Householder_>=65"
        table_line= "  Overall  " + "$" + str(data_dict[base_id]["1"]) + "         "
        for i in range(2,6):
                        table_line = table_line + "$" + str(data_dict[base_id][str(i)]) + "            "
        print table_line
#--------------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------------
def process_aggregate_income_by_age(title_dict, data_dict):
	base_id="B19050"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   Householder_<25   Householder_25-44   Householder_45-64   Householder_>=65"
	population = int(data_dict[base_id][str("1")]) 
	table_line = "  Overall:  " + "$" + str(population) + "   "
        for i in range(2,6):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                 "
        print table_line
#--------------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------------
def process_earnings_for_households(title_dict, data_dict):
	base_id="B19051"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   with_earnings   no_earnings"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  "  + str(population) + "       "
        for i in range(2,4):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line
#----------------------------------------------------------------------------------------
#
#----------------------------------------------------------------------------------------
def wage_salary_income_for_households(title_dict, data_dict):
	base_id="B19052"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   With_wage_or_salary   Without_wage_or_salary"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  "  + str(population) + "          "
        for i in range(2,4):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                   "
        print table_line
#---------------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------------
def self_employment_income(title_dict, data_dict):
	base_id="B19053"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   With_self_employment   Without_self_employment"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  "  + str(population) + "          "
        for i in range(2,4):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                   "
        print table_line
#-------------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------------
def interest_dividends_or_rental_income(title_dict, data_dict):
	base_id="B19054"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   With_interest/dividends/rental   Without_interest/dividends/rental"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  "  + str(population) + "          "
        for i in range(2,4):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                           "
        print table_line
#---------------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------------
def social_security_income(title_dict, data_dict):
	base_id="B19055"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   With_Social_Security   Without_Social_Security"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  "  + str(population) + "          "
        for i in range(2,4):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                   "
        print table_line
#---------------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------------
def supplemental_security_income(title_dict, data_dict):
	base_id="B19056"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   With_SSI   Without_SSI"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  "  + str(population) + "       "
        for i in range(2,4):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "          "
        print table_line
#-------------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------------
def public_assistance_income_for_households(title_dict, data_dict):
	base_id="B19057"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   With_Public_Assistance_Income   Without_Public_Assistance_Income"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  "  + str(population) + "            "
        for i in range(2,4):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                          "
        print table_line
#------------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------------
def food_stamps_for_households(title_dict, data_dict):
	base_id="B19058"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   With_PAI_or_Food_Stamps   Without_PAI_or_Food_Stamps"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  "  + str(population) + "            "
        for i in range(2,4):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                          "
        print table_line
#-----------------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------------
def retirement_income_for_households(title_dict, data_dict):
	base_id="B19059"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   With_Retirement_Income   Without_Retirement_Income"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  "  + str(population) + "            "
        for i in range(2,4):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                          "
        print table_line
#---------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------
def other_types_of_income(title_dict, data_dict):
	base_id="B19060"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total   With_other_Income   Without_other_Income"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  "  + str(population) + "            "
        for i in range(2,4):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                     "
        print table_line

#---------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------
def aggregate_household_earnings_total(title_dict, data_dict):
	base_id="B19061"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
	print "                 Total        Wage    Self    Interest    Soc_Sec    SSI    PAI    Retire    Other"
	population = int(data_dict[base_id][str("1")])
	table_line = "  Overall:  " + "$" + str(population) + "     "
	table_line += two_digit_pc(str(int(data_dict["B19062"][str("1")])*100 / population))+ "      "
	table_line += two_digit_pc(str(int(data_dict["B19063"][str("1")])*100 / population))+ "      "
	table_line += two_digit_pc(str(int(data_dict["B19064"][str("1")])*100 / population))+ "      "
	table_line += two_digit_pc(str(int(data_dict["B19065"][str("1")])*100 / population))+ "      "
	table_line += two_digit_pc(str(int(data_dict["B19066"][str("1")])*100 / population))+ "      " 	
	table_line += two_digit_pc(str(int(data_dict["B19067"][str("1")])*100 / population))+ "      "
	table_line += two_digit_pc(str(int(data_dict["B19069"][str("1")])*100 / population))+ "      "
	table_line += two_digit_pc(str(int(data_dict["B19070"][str("1")])*100 / population))+ "      "

	print table_line	
#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
def process_income_quintile_upper(title_dict, data_dict):
	base_id="B19080"
        print banner
        print title_dict[base_id]
        print banner
        print "                 Lowest_Quintile  Second_Quintile  Third_Quintile  Fourth_Quintile   Top_5% (lower)"
	table_line= "  Overall          " + "$" + str(data_dict[base_id]["1"]) + "         "
        for i in range(2,6):
                        table_line = table_line + "$" + str(data_dict[base_id][str(i)]) + "           "
        print table_line
#---------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------
def mean_quintile_incomes(title_dict, data_dict):
	base_id="B19081"
        print banner
        print title_dict[base_id]
        print banner
        print "                 Lowest_Quintile  Second_Quintile  Third_Quintile  Fourth_Quintile  Highest_Quintile   Top_5%"
        table_line= "  Overall          " + "$" + str(data_dict[base_id]["1"]) + "         "
        for i in range(2,7):
                        table_line = table_line + "$" + str(data_dict[base_id][str(i)]) + "           "
        print table_line
#---------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------
def shares_income_quintile(title_dict, data_dict):
	base_id="B19082"
        print banner
        print title_dict[base_id]
        print banner
        print "                 Lowest_Quintile  Second_Quintile  Third_Quintile  Fourth_Quintile  Highest_Quintile   Top_5%"
        table_line= "  Overall          " + str(data_dict[base_id]["1"]) + "%" + "             "
        for i in range(2,7):
                        table_line = table_line + str(data_dict[base_id][str(i)]) + "%" + "            "
        print table_line

#----------------------------------------------------------------------------------
#
#----------------------------------------------------------------------------------
def gini_index(title_dict, data_dict):
	base_id="B19083"
	print banner
        print title_dict[base_id]
        print banner
	print "                 GNI Index"
	table_line= "  Overall         " + str(data_dict[base_id]["1"]) 
	print table_line
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
def family_income_table_line(base_id, category, span, total):
	table_line= category + \
        two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][total]))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][span])*100 / int(data_dict[id][total]))) + "      "
        return table_line
#-----------------------------------------------------------------------------
def process_family_income_by_race(title_dict, data_dict):
	base_id="B19101"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                     Total  White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"

	print family_income_table_line(base_id, "Less than $10,000    ", "2", "1")
        print family_income_table_line(base_id, "  $10,000-$14,999    ", "3", "1")
        print family_income_table_line(base_id, "  $15,000-$19,999    ", "4", "1")
        print family_income_table_line(base_id, "  $20,000-$24,999    ", "5", "1")
        print family_income_table_line(base_id, "  $25,000-$29,999    ", "6", "1")
        print family_income_table_line(base_id, "  $30,000-$34,999    ", "7", "1")
        print family_income_table_line(base_id, "  $35,000-$39,999    ", "8", "1")
        print family_income_table_line(base_id, "  $40,000-$44,999    ", "9", "1")
        print family_income_table_line(base_id, "  $45,000-$49,999    ", "10", "1")
        print family_income_table_line(base_id, "  $50,000-$59,999    ", "11", "1")
        print family_income_table_line(base_id, "  $60,000-$69,000    ", "12", "1")
        print family_income_table_line(base_id, "  $75,000-$99,999    ", "13", "1")
        print family_income_table_line(base_id, "$100,000-$124,999    ", "14", "1")
        print family_income_table_line(base_id, "$125,000-$149,000    ", "15", "1")
        print family_income_table_line(base_id, "$150,000-$199,000    ", "16", "1")
        print family_income_table_line(base_id, " $200,000 or more    ", "17", "1")
#----------------------------------------------------------------------------
#
#----------------------------------------------------------------------------
def family_median_income_by_race(title_dict, data_dict):
	base_id="B19113"
        print banner
        print title_dict[base_id]
        print banner
        print "           Total    White    African    Native    Asian    Islander    Other    >Two    Caucasian    Hispanic"
        table_line= "  Overall   " + "$" + str(data_dict[base_id]["1"]) + "    "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + "$" + str(data_dict[id]["1"]) + "    "
        print table_line
#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def median_family_income_by_size(title_dict, data_dict):
	base_id="B19119"
        print banner
        print title_dict[base_id]
        print banner
        print "           Total    2-people   3-people  4-people   5-people   6-people   7+people"
        table_line= " Overall   " + "$" + str(data_dict[base_id]["1"]) + "     "
        for i in range(2,8):
                        table_line = table_line + "$" + str(data_dict[base_id][str(i)]) + "     "
        print table_line
#----------------------------------------------------------------------------
#
#----------------------------------------------------------------------------
def median_family_income_by_earners(title_dict, data_dict):
	base_id="B19121"
        print banner
        print title_dict[base_id]
        print banner
        print "           Total    No_earners    1_earner    2_earners    3+_earners"
        table_line= " Overall   " + "$" + str(data_dict[base_id]["1"]) + "     "
        for i in range(2,6):
                        table_line = table_line + "$" + str(data_dict[base_id][str(i)]) + "       "
        print table_line
#-------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
def median_family_income_by_children(title_dict, data_dict):
	base_id="B19125"
        print banner
        print title_dict[base_id]
        print banner
        print "           Total    With_children    Without_children"
        table_line= " Overall   " + "$" + str(data_dict[base_id]["1"]) + "       "
        for i in range(2,4):
                        table_line = table_line + "$" + str(data_dict[base_id][str(i)]) + "          "
        print table_line
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
def median_income_by_type_family_children(title_dict, data_dict):
	base_id="B19126"
	print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                        Total    With_children    Without_children"

	table_line= "    Married-couple:     " + "$" + str(data_dict[base_id]["2"]) + "       "
        for i in range(3,5):
                        table_line = table_line + "$" + str(data_dict[base_id][str(i)]) + "          "
        print table_line

        table_line = "      Other_family:     " + "$" + str(data_dict[base_id]["2"]) + "       "
        print table_line

        table_line = "  Male_householder:     " + "$" + str(data_dict[base_id]["6"]) + "       "
	for i in range(3,5):
                        table_line = table_line + "$" + str(data_dict[base_id][str(i+4)]) + "          "
        print table_line

        table_line = "Female_householder:     " + "$" + str(data_dict[base_id]["9"]) + "       "
	for i in range(3,5):
                        table_line = table_line + "$" + str(data_dict[base_id][str(i+7)]) + "          "
        print table_line
#------------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------------
def family_income_aggregate(title_dict, data_dict):
	base_id="B19127"
        print banner
        print title_dict[base_id]
        print banner
        print "                 Total"
        table_line= "  Overall       " + "$" + str(data_dict[base_id]["1"])
        print table_line
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
def aggregate_income_by_type_by_children(title_dict, data_dict):
	base_id="B19128"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                    Subtotal        With_children        Without_children"
        table_line = "             Total:                       "
        for i in range(3,5):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+7)])
                population = int(data_dict[base_id][str("1")]);
                table_line += two_digit_pc(str(poverty*100/population)) + "                ";
        print table_line

        table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("2")]) 
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"               "
        for i in range(3,5):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "                "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("5")]) 
        table_line += two_digit_pc(str(int(data_dict[base_id][str("5")])*100 / int(data_dict[base_id][str("1")])))+"               "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("6")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("6")])*100 / int(data_dict[base_id][str("1")])))+"               "
        for i in range(3,5):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+4)])*100 / population))+ "                "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("9")]) 
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / int(data_dict[base_id][str("1")])))+"               "
        for i in range(3,5):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+7)])*100 / population))+ "                "
        print table_line

        return
#----------------------------------------------------------------------------------
#
#----------------------------------------------------------------------------------
def aggregate_income_by_family_workers(title_dict, data_dict):
	base_id="B19129"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                 Total      No_workers   1_worker   2_(husband/wife)   2_(other)   3_(husband/wife)   3_(other)"
        population = int(data_dict[base_id][str("1")])
        table_line = "  Overall:  " + "$" + str(population) + "     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / population))+ "           "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+ "           "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+ "           "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("5")])*100 / population))+ "           "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("6")])*100 / population))+ "           "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("7")])*100 / population))+ "           "

        print table_line
#----------------------------------------------------------------------------------
#
#----------------------------------------------------------------------------------
def aggregate_income_by_age_by_type(title_dict, data_dict):
	base_id="B19130"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "                    Subtotal   15_yrs   25_yrs   35_yrs   45_yrs   55_yrs   60_yrs   65_yrs     >=74_yrs"
        table_line = "             Total:                 "
        for i in range(3,11):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+10)]) + int(data_dict[base_id][str(i+19)])
                population = int(data_dict[base_id][str("1")]);
                table_line += two_digit_pc(str(poverty*100/population)) + "      ";
        print table_line

        table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("2")]) 
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"         "
        for i in range(3,11):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "      "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("11")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("11")])*100 / int(data_dict[base_id][str("1")])))+"        "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("12")]) 
        table_line += two_digit_pc(str(int(data_dict[base_id][str("12")])*100 / int(data_dict[base_id][str("1")])))+"         "
        for i in range(3,11):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+10)])*100 / population))+ "      "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("21")]) 
        table_line += two_digit_pc(str(int(data_dict[base_id][str("21")])*100 / int(data_dict[base_id][str("1")])))+"         "
        for i in range(3,11):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+19)])*100 / population))+ "      "
        print table_line

        return
#-------------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------------
def family_type_income_table_line(base_id, category, span, total):
        table_line= category + two_digit_pc(str((int(data_dict[base_id][span]) + int(data_dict[base_id][str(int(span)+17)]) + int(data_dict[base_id][str(int(span)+36)]) + int(data_dict[base_id][str(int(span)+53)]) + int(data_dict[base_id][str(int(span)+71)]) + int(data_dict[base_id][str(int(span)+88)])) *100 / int(data_dict[base_id][str("1")]))) + "      "
        table_line += two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][total]))) + "        "
	table_line += two_digit_pc(str(int(data_dict[base_id][str(int(span)+17)])*100 / int(data_dict[base_id][str("20")]))) + "         "
	table_line += two_digit_pc(str(int(data_dict[base_id][str(int(span)+36)])*100 / int(data_dict[base_id][str("39")]))) + "         "
	table_line += two_digit_pc(str(int(data_dict[base_id][str(int(span)+53)])*100 / int(data_dict[base_id][str("56")]))) + "         "
	table_line += two_digit_pc(str(int(data_dict[base_id][str(int(span)+71)])*100 / int(data_dict[base_id][str("74")]))) + "         "
	table_line += two_digit_pc(str(int(data_dict[base_id][str(int(span)+88)])*100 / int(data_dict[base_id][str("91")]))) + "      "
	return table_line
#-------------------------------------------------------------------------------------
def family_type_by_own_children_income(title_dict, data_dict):
	base_id="B19131"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                        Total   Couple   No_child   Male_head   No_child   Female_head   No_child"
	print family_type_income_table_line(base_id, "    Less than $10,000    ", "4", "3")
	print family_type_income_table_line(base_id, "   $10,000 to $14,999    ", "5", "3")
	print family_type_income_table_line(base_id, "   $15,000 to $19,999    ", "6", "3")
	print family_type_income_table_line(base_id, "   $20,000 to $24,999    ", "7", "3")
	print family_type_income_table_line(base_id, "   $25,000 to $29,999    ", "8", "3")
	print family_type_income_table_line(base_id, "   $30,000 to $34,999    ", "9", "3")
	print family_type_income_table_line(base_id, "   $35,000 to $39,999    ", "10", "3")
	print family_type_income_table_line(base_id, "   $40,000 to $44,999    ", "11", "3")
	print family_type_income_table_line(base_id, "   $45,000 to $49,999    ", "12", "3")
	print family_type_income_table_line(base_id, "   $50,000 to $59,999    ", "13", "3")
	print family_type_income_table_line(base_id, "   $60,000 to $74,999    ", "14", "3")
	print family_type_income_table_line(base_id, "   $75,000 to $99,999    ", "15", "3")
	print family_type_income_table_line(base_id, " $100,000 to $124,999    ", "16", "3")
	print family_type_income_table_line(base_id, " $125,000 to $149,999    ", "17", "3")
	print family_type_income_table_line(base_id, " $150,000 to $199,999    ", "18", "3")
	print family_type_income_table_line(base_id, "     $200,000 or more    ", "19", "3")
#----------------------------------------------------------------------------------
#
#----------------------------------------------------------------------------------
def nonfamily_income_table_line(base_id, category, span, total):
	table_line = category + two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][total])))
	return table_line
#---------------------------------------------------------------------------------
def process_nonfamily_household_income(title_dict, data_dict):
	base_id="B19201"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
	print "                        Total"
	print nonfamily_income_table_line(base_id, "    Less than $10,000    ", "2", "1")
        print nonfamily_income_table_line(base_id, "   $10,000 to $14,999    ", "3", "1")
        print nonfamily_income_table_line(base_id, "   $15,000 to $19,999    ", "4", "1")
        print nonfamily_income_table_line(base_id, "   $20,000 to $24,999    ", "5", "1")
        print nonfamily_income_table_line(base_id, "   $25,000 to $29,999    ", "6", "1")
        print nonfamily_income_table_line(base_id, "   $30,000 to $34,999    ", "7", "1")
        print nonfamily_income_table_line(base_id, "   $35,000 to $39,999    ", "8", "1")
        print nonfamily_income_table_line(base_id, "   $40,000 to $44,999    ", "9", "1")
        print nonfamily_income_table_line(base_id, "   $45,000 to $49,999    ", "10", "1")
        print nonfamily_income_table_line(base_id, "   $50,000 to $59,999    ", "11", "1")
        print nonfamily_income_table_line(base_id, "   $60,000 to $74,999    ", "12", "1")
        print nonfamily_income_table_line(base_id, "   $75,000 to $99,999    ", "13", "1")
        print nonfamily_income_table_line(base_id, " $100,000 to $124,999    ", "14", "1")
        print nonfamily_income_table_line(base_id, " $125,000 to $149,999    ", "15", "1")
        print nonfamily_income_table_line(base_id, " $150,000 to $199,999    ", "16", "1")
        print nonfamily_income_table_line(base_id, "     $200,000 or more    ", "17", "1")
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
def non_family_median_income(title_dict, data_dict):
	base_id="B19202"
        print banner
        print title_dict[base_id]
        print banner
        print "           Total    White    African    Native    Asian    Islander    Other    >Two    Caucasian    Hispanic"
        table_line= "  Overall   " + "$" + str(data_dict[base_id]["1"]) + "    "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + "$" + str(data_dict[id]["1"]) + "    "
        print table_line
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
def aggregate_nonfamily_income(title_dict, data_dict):
	base_id="B19214"
        print banner
        print title_dict[base_id]
        print banner
        print "                 Total"
        table_line= "  Overall       " + "$" + str(data_dict[base_id]["1"])
        print table_line
#----------------------------------------------------------------------------
#
#----------------------------------------------------------------------------
def median_nonfamily_income(title_dict, data_dict):
	base_id="B19215"
        print banner
        print title_dict[base_id]
        print banner
        print "                    Subtotal   Householder_15-64   Householder_65_and_over"
        table_line = "           Total:                   "
        for i in range(4,6):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+3)]) + int(data_dict[base_id][str(i+7)]) + int(data_dict[base_id][str(i+10)])
                table_line += two_digit_pc( "$" + str(poverty/4)) + "         ";
        print table_line

        table_line = "      Male_alone:     "
        population = int(data_dict[base_id][str("3")])
        table_line += "$" + str(population) + "        "
        for i in range(4,6):
                table_line += "$" + str(data_dict[base_id][str(i)])+ "         "
        print table_line

        table_line = "  Male_not_alone:     "
        population = int(data_dict[base_id][str("6")])
        table_line += "$" + str(population) + "        "
	for i in range(4,6):
		table_line += "$" + str(data_dict[base_id][str(i+3)])+ "         "
        print table_line

        table_line = "    Female_alone:     "
        population = int(data_dict[base_id][str("10")])
        table_line += "$" + str(population) + "        "
        for i in range(4,6):
                table_line += "$" + str(data_dict[base_id][str(i+7)])+ "         "
        print table_line

        table_line = "Female_not_alone:     "
        population = int(data_dict[base_id][str("13")])
        table_line += "$" + str(population) + "        "
        for i in range(4,6):
                table_line += "$" + str(data_dict[base_id][str(i+10)])+ "         "
        print table_line

        return
	
#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
def aggregate_nonfamily_income_alone(title_dict, data_dict):
	base_id="B19216"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                    Subtotal   Householder_15-64   Householder_65_and_over"
	table_line = "           Total:                    "
        for i in range(4,6):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+3)]) + int(data_dict[base_id][str(i+7)]) + int(data_dict[base_id][str(i+10)])
                population = int(data_dict[base_id][str("1")]);
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

        table_line = "      Male_alone:     "
        population = int(data_dict[base_id][str("3")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,6):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        table_line = "  Male_not_alone:     "
        population = int(data_dict[base_id][str("6")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("6")])*100 / int(data_dict[base_id][str("1")])))+"            "
	for i in range(4,6):
		table_line += two_digit_pc(str(int(data_dict[base_id][str(i+3)])*100 / population))+ "             "
        print table_line

        table_line = "    Female_alone:     "
        population = int(data_dict[base_id][str("10")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("10")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,6):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+7)])*100 / population))+ "             "
        print table_line

        table_line = "Female_not_alone:     "
        population = int(data_dict[base_id][str("13")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("13")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,6):
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+10)])*100 / population))+ "             "
        print table_line

        return
#---------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------
def per_capita_income_by_race(title_dict, data_dict):
	base_id="B19301"
        print banner
        print title_dict[base_id]
        print banner
        print "           Total    White    African    Native    Asian    Islander    Other    >Two    Caucasian    Hispanic"
        table_line= "  Overall   " + "$" + str(data_dict[base_id]["1"]) + "    "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + "$" + str(data_dict[id]["1"]) + "    "
        print table_line
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
def aggregate_income_by_race(title_dict, data_dict):
	base_id="B19313"
        print banner
        print title_dict[base_id] + ( "Income Distribution")
        print banner
        print "           Total             White    African    Native    Asian    Islander    Other    >Two    Caucasian    Hispanic"
        table_line= "  Overall   " + "$" + str(data_dict[base_id]["1"]) + "    "
	population = int(data_dict["B19313"]["1"])
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
			table_line += two_digit_pc(str(int(data_dict[id][str("1")])*100 / population))+ "       "
        print table_line
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
def process_sex_table_line(base_id, category, span, total):
	table_line= category + two_digit_pc(str((int(data_dict[base_id][span]) + int(data_dict[base_id][str(int(span)+23)]) + int(data_dict[base_id][str(int(span)+47)]) + int(data_dict[base_id][str(int(span)+70)])) *100 / int(data_dict[base_id][str("1")]))) + "             "
        table_line += two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][str("3")]))) + "               "
        table_line += two_digit_pc(str(int(data_dict[base_id][str(int(span)+23)])*100 / int(data_dict[base_id][str("26")]))) + "                "
        table_line += two_digit_pc(str(int(data_dict[base_id][str(int(span)+47)])*100 / int(data_dict[base_id][str("50")]))) + "                "
        table_line += two_digit_pc(str(int(data_dict[base_id][str(int(span)+70)])*100 / int(data_dict[base_id][str("73")]))) + "                "
        return table_line
#-------------------------------------------------------------------------------------
def process_sex_by_experience(title_dict, data_dict):
        base_id="B19325"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                        Total   Male_worked_full-time   Male_other   Female_worked_full-time   Female_other"
        print process_sex_table_line(base_id, " $1 to $2,499 or loss    ", "6", "3")
        print process_sex_table_line(base_id, "     $2,500 to $4,999    ", "7", "3")
        print process_sex_table_line(base_id, "     $5,000 to $7,499    ", "8", "3")
        print process_sex_table_line(base_id, "     $7,500 to $9,999    ", "9", "3")
        print process_sex_table_line(base_id, "   $10,000 to $12,499    ", "10", "3")
        print process_sex_table_line(base_id, "   $12,500 to $14,999    ", "11", "3")
        print process_sex_table_line(base_id, "   $15,000 to $17,999    ", "12", "3")
        print process_sex_table_line(base_id, "   $17,500 to $19,999    ", "13", "3")
        print process_sex_table_line(base_id, "   $20,000 to $22,499    ", "14", "3")
        print process_sex_table_line(base_id, "   $22,500 to $24,999    ", "15", "3")
        print process_sex_table_line(base_id, "   $25,000 to $29,999    ", "16", "3")
        print process_sex_table_line(base_id, "   $30,000 to $34,999    ", "17", "3")
        print process_sex_table_line(base_id, "   $35,000 to $39,999    ", "18", "3")
        print process_sex_table_line(base_id, "   $40,000 to $44,999    ", "19", "3")
        print process_sex_table_line(base_id, "   $45,000 to $49,999    ", "20", "3")
        print process_sex_table_line(base_id, "   $50,000 to $54,999    ", "21", "3")
	print process_sex_table_line(base_id, "   $55,000 to $64,999    ", "22", "3")
	print process_sex_table_line(base_id, "   $65,000 to $74,999    ", "23", "3")
	print process_sex_table_line(base_id, "   $75,000 to $99,999    ", "24", "3")
	print process_sex_table_line(base_id, "     $100,000 or more    ", "25", "3") 
#------------------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------------------
def median_income_by_sex_by_experience(title_dict, data_dict):
	base_id="B19326"
        print banner
        print title_dict[base_id] 
        print banner
 	print "             Total   Worked_full_time   Other"
	table_line= "  Overall   " + "$" + str(data_dict[base_id]["1"]) + "    "
        for i in range(3,5):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+3)]) 
                population = int(data_dict[base_id][str("1")]);
                table_line += two_digit_pc( "$" + str(poverty/2)) + "           ";
        print table_line

	table_line= "     Male   " + "$" + str(data_dict[base_id]["2"]) + "    "
        for i in range(3,5):
                poverty = int(data_dict[base_id][str(i)]) 
                table_line += two_digit_pc( "$" + str(poverty)) + "           ";
        print table_line

	table_line= "   Female   " + "$" + str(data_dict[base_id]["5"]) + "    "
        for i in range(3,5):
                poverty = int(data_dict[base_id][str(i+3)]) 
                table_line += two_digit_pc( "$" + str(poverty)) + "           ";
        print table_line
#--------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
def sex_by_earnings_table_line(base_id, category, span, total):
	table_line= category + two_digit_pc(str((int(data_dict[base_id][span]) + int(data_dict[base_id][str(int(span)+21)])) *100 / int(data_dict[base_id][str("1")]))) + "      "
        table_line += two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][str("3")]))) + "     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str(int(span)+21)])*100 / int(data_dict[base_id][str("23")]))) + "      "
        return table_line

#--------------------------------------------------------------------------------
def process_sex_by_earnings(title_dict, data_dict):
	base_id="B20001"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                        Total   Male   Female"
	print sex_by_earnings_table_line(base_id, " $1 to $2,499 or loss    ", "3", "2")
        print sex_by_earnings_table_line(base_id, "     $2,500 to $4,999    ", "4", "2")
        print sex_by_earnings_table_line(base_id, "     $5,000 to $7,499    ", "5", "2")
        print sex_by_earnings_table_line(base_id, "     $7,500 to $9,999    ", "6", "2")
        print sex_by_earnings_table_line(base_id, "   $10,000 to $12,499    ", "7", "2")
        print sex_by_earnings_table_line(base_id, "   $12,500 to $14,999    ", "8", "2")
        print sex_by_earnings_table_line(base_id, "   $15,000 to $17,999    ", "9", "2")
        print sex_by_earnings_table_line(base_id, "   $17,500 to $19,999    ", "10", "2")
        print sex_by_earnings_table_line(base_id, "   $20,000 to $22,499    ", "11", "2")
        print sex_by_earnings_table_line(base_id, "   $22,500 to $24,999    ", "12", "2")
        print sex_by_earnings_table_line(base_id, "   $25,000 to $29,999    ", "13", "2")
        print sex_by_earnings_table_line(base_id, "   $30,000 to $34,999    ", "14", "2")
        print sex_by_earnings_table_line(base_id, "   $35,000 to $39,999    ", "15", "2")
        print sex_by_earnings_table_line(base_id, "   $40,000 to $44,999    ", "16", "2")
        print sex_by_earnings_table_line(base_id, "   $45,000 to $49,999    ", "17", "2")
        print sex_by_earnings_table_line(base_id, "   $50,000 to $54,999    ", "18", "2")
        print sex_by_earnings_table_line(base_id, "   $55,000 to $64,999    ", "19", "2")
        print sex_by_earnings_table_line(base_id, "   $65,000 to $74,999    ", "20", "2")
        print sex_by_earnings_table_line(base_id, "   $75,000 to $99,999    ", "21", "2")
        print sex_by_earnings_table_line(base_id, "     $100,000 or more    ", "22", "2")
#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def median_earnings_by_sex(title_dict, data_dict):
	base_id="B20002"
        print banner
        print title_dict[base_id]
        print banner
        print "             Total   Male   Female"
	table_line= "  Overall   " + "$" + str(data_dict[base_id]["1"]) + "  "
        for i in range(2,4):
                poverty = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc( "$" + str(poverty)) + "  ";
        print table_line
#------------------------------------------------------------------------
#
#------------------------------------------------------------------------
def aggregate_earnings_by_sex_by_experience(title_dict, data_dict):
	base_id="B20003"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "             Total   Worked_full_time   Other"
        table_line= "  Overall                  " 
        for i in range(3,5):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+3)])
                table_line += two_digit_pc(str(poverty*100/int(data_dict[base_id]["1"]))) + "           ";
        print table_line

        table_line= "     Male      " + two_digit_pc(str(int(data_dict[base_id]["2"])*100/int(data_dict[base_id]["1"]))) + "         "
        for i in range(3,5):
                poverty = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(poverty*100/int(data_dict[base_id]["2"]))) + "           ";
        print table_line

        table_line= "   Female      " + two_digit_pc(str(int(data_dict[base_id]["5"])*100/int(data_dict[base_id]["1"]))) + "         "
        for i in range(3,5):
                poverty = int(data_dict[base_id][str(i+3)])
                table_line += two_digit_pc(str(poverty*100/int(data_dict[base_id]["5"]))) + "           ";
        print table_line
#----------------------------------------------------------------------
#
#----------------------------------------------------------------------
def median_earnings_by_sex_by_education(title_dict, data_dict):
	base_id="B20004"
        print banner
        print title_dict[base_id]
        print banner
        print "             Total   <High_school   High_school   Associate   Bachelor   Graduate"
	table_line= "    Overall   " + "$" + str(data_dict[base_id]["1"]) + "      "
	for i in range(2,7):
		table_line += "$" + str(data_dict[base_id][str(i)]) + "      "
	print table_line

	table_line= "       Male   " + "$" + str(data_dict[base_id]["7"]) + "      "
        for i in range(2,7):
                table_line += "$" + str(data_dict[base_id][str(i+6)]) + "      "
        print table_line
	
	table_line= "     Female   " + "$" + str(data_dict[base_id]["13"]) + "      "
        for i in range(2,7):
                table_line += "$" + str(data_dict[base_id][str(i+12)]) + "      "
        print table_line
#--------------------------------------------------------------------
#
#--------------------------------------------------------------------
def sex_work_experience_table_line(base_id, category, span, total):
        table_line= category + \
        two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][total]))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][span])*100 / int(data_dict[id][total]))) + "      "
        return table_line

#--------------------------------------------------------------------
def sex_by_work_experience(title_dict, data_dict):
	base_id="B20005"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                          Total  White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"
	print sex_work_experience_table_line(base_id, "  Male_worked_full-time    ", "3", "1")
	print sex_work_experience_table_line(base_id, "   $1 to $2,499 or loss    ", "6", "3")	
	print sex_work_experience_table_line(base_id, "       $2,500 to $4,999    ", "7", "3")
	print sex_work_experience_table_line(base_id, "       $5,000 to $7,499    ", "8", "3")
	print sex_work_experience_table_line(base_id, "       $7,500 to $9,999    ", "9", "3")
	print sex_work_experience_table_line(base_id, "     $10,000 to $12,499    ", "10", "3")
	print sex_work_experience_table_line(base_id, "     $12,500 to $14,999    ", "11", "3")
	print sex_work_experience_table_line(base_id, "     $15,000 to $17,499    ", "12", "3")
	print sex_work_experience_table_line(base_id, "     $17,500 to $19,999    ", "13", "3")
	print sex_work_experience_table_line(base_id, "     $20,000 to $22,499    ", "14", "3")
	print sex_work_experience_table_line(base_id, "     $22,500 to $24,999    ", "15", "3")
	print sex_work_experience_table_line(base_id, "     $25,000 to $29,999    ", "16", "3")
	print sex_work_experience_table_line(base_id, "     $30,000 to $34,999    ", "17", "3")
	print sex_work_experience_table_line(base_id, "     $35,000 to $39,999    ", "18", "3")
	print sex_work_experience_table_line(base_id, "     $40,000 to $44,999    ", "19", "3")
	print sex_work_experience_table_line(base_id, "     $45,000 to $49,999    ", "20", "3")
	print sex_work_experience_table_line(base_id, "     $50,000 to $54,999    ", "21", "3")
	print sex_work_experience_table_line(base_id, "     $55,000 to $64,999    ", "22", "3")
	print sex_work_experience_table_line(base_id, "     $65,000 to $74,999    ", "23", "3")
	print sex_work_experience_table_line(base_id, "     $75,000 to $99,999    ", "24", "3")
	print sex_work_experience_table_line(base_id, "       $100,000 or more    ", "25", "3")

	print sex_work_experience_table_line(base_id, "             Male_other    ", "26", "1")
        print sex_work_experience_table_line(base_id, "   $1 to $2,499 or loss    ", "29", "26")
        print sex_work_experience_table_line(base_id, "       $2,500 to $4,999    ", "30", "26")
        print sex_work_experience_table_line(base_id, "       $5,000 to $7,499    ", "31", "26")
        print sex_work_experience_table_line(base_id, "       $7,500 to $9,999    ", "32", "26")
        print sex_work_experience_table_line(base_id, "     $10,000 to $12,499    ", "33", "26")
        print sex_work_experience_table_line(base_id, "     $12,500 to $14,999    ", "34", "26")
        print sex_work_experience_table_line(base_id, "     $15,000 to $17,499    ", "35", "26")
        print sex_work_experience_table_line(base_id, "     $17,500 to $19,999    ", "36", "26")
        print sex_work_experience_table_line(base_id, "     $20,000 to $22,499    ", "37", "26")
        print sex_work_experience_table_line(base_id, "     $22,500 to $24,999    ", "38", "26")
        print sex_work_experience_table_line(base_id, "     $25,000 to $29,999    ", "39", "26")
        print sex_work_experience_table_line(base_id, "     $30,000 to $34,999    ", "40", "26")
        print sex_work_experience_table_line(base_id, "     $35,000 to $39,999    ", "41", "26")
        print sex_work_experience_table_line(base_id, "     $40,000 to $44,999    ", "42", "26")
        print sex_work_experience_table_line(base_id, "     $45,000 to $49,999    ", "43", "26")
        print sex_work_experience_table_line(base_id, "     $50,000 to $54,999    ", "44", "26")
        print sex_work_experience_table_line(base_id, "     $55,000 to $64,999    ", "45", "26")
        print sex_work_experience_table_line(base_id, "     $65,000 to $74,999    ", "46", "26")
        print sex_work_experience_table_line(base_id, "     $75,000 to $99,999    ", "47", "26")
        print sex_work_experience_table_line(base_id, "       $100,000 or more    ", "48", "26")

	print sex_work_experience_table_line(base_id, "Female_worked_full-time    ", "50", "1")
        print sex_work_experience_table_line(base_id, "   $1 to $2,499 or loss    ", "53", "50")
        print sex_work_experience_table_line(base_id, "       $2,500 to $4,999    ", "54", "50")
        print sex_work_experience_table_line(base_id, "       $5,000 to $7,499    ", "55", "50")
        print sex_work_experience_table_line(base_id, "       $7,500 to $9,999    ", "56", "50")
        print sex_work_experience_table_line(base_id, "     $10,000 to $12,499    ", "57", "50")
        print sex_work_experience_table_line(base_id, "     $12,500 to $14,999    ", "58", "50")
        print sex_work_experience_table_line(base_id, "     $15,000 to $17,499    ", "59", "50")
        print sex_work_experience_table_line(base_id, "     $17,500 to $19,999    ", "60", "50")
        print sex_work_experience_table_line(base_id, "     $20,000 to $22,499    ", "61", "50")
        print sex_work_experience_table_line(base_id, "     $22,500 to $24,999    ", "62", "50")
        print sex_work_experience_table_line(base_id, "     $25,000 to $29,999    ", "63", "50")
        print sex_work_experience_table_line(base_id, "     $30,000 to $34,999    ", "64", "50")
        print sex_work_experience_table_line(base_id, "     $35,000 to $39,999    ", "65", "50")
        print sex_work_experience_table_line(base_id, "     $40,000 to $44,999    ", "66", "50")
        print sex_work_experience_table_line(base_id, "     $45,000 to $49,999    ", "67", "50")
        print sex_work_experience_table_line(base_id, "     $50,000 to $54,999    ", "68", "50")
        print sex_work_experience_table_line(base_id, "     $55,000 to $64,999    ", "69", "50")
        print sex_work_experience_table_line(base_id, "     $65,000 to $74,999    ", "70", "50")
        print sex_work_experience_table_line(base_id, "     $75,000 to $99,999    ", "71", "50")
        print sex_work_experience_table_line(base_id, "       $100,000 or more    ", "72", "50")

	print sex_work_experience_table_line(base_id, "           Female_other    ", "73", "1")
        print sex_work_experience_table_line(base_id, "   $1 to $2,499 or loss    ", "76", "73")
        print sex_work_experience_table_line(base_id, "       $2,500 to $4,999    ", "76", "73")
        print sex_work_experience_table_line(base_id, "       $5,000 to $7,499    ", "78", "73")
        print sex_work_experience_table_line(base_id, "       $7,500 to $9,999    ", "79", "73")
        print sex_work_experience_table_line(base_id, "     $10,000 to $12,499    ", "80", "73")
        print sex_work_experience_table_line(base_id, "     $12,500 to $14,999    ", "81", "73")
        print sex_work_experience_table_line(base_id, "     $15,000 to $17,499    ", "82", "73")
        print sex_work_experience_table_line(base_id, "     $17,500 to $19,999    ", "83", "73")
        print sex_work_experience_table_line(base_id, "     $20,000 to $22,499    ", "84", "73")
        print sex_work_experience_table_line(base_id, "     $22,500 to $24,999    ", "85", "73")
        print sex_work_experience_table_line(base_id, "     $25,000 to $29,999    ", "86", "73")
        print sex_work_experience_table_line(base_id, "     $30,000 to $34,999    ", "87", "73")
        print sex_work_experience_table_line(base_id, "     $35,000 to $39,999    ", "88", "73")
        print sex_work_experience_table_line(base_id, "     $40,000 to $44,999    ", "89", "73")
        print sex_work_experience_table_line(base_id, "     $45,000 to $49,999    ", "90", "73")
        print sex_work_experience_table_line(base_id, "     $50,000 to $54,999    ", "91", "73")
        print sex_work_experience_table_line(base_id, "     $55,000 to $64,999    ", "92", "73")
        print sex_work_experience_table_line(base_id, "     $65,000 to $74,999    ", "93", "73")
        print sex_work_experience_table_line(base_id, "     $75,000 to $99,999    ", "94", "73")
        print sex_work_experience_table_line(base_id, "       $100,000 or more    ", "95", "73")
#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
def earnings_median_experience_table_line(base_id, category, span, total):
        table_line= category + \
	two_digit_pc("$" + str(data_dict[base_id][span])) + "   "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
			two_digit_pc("$" + str(data_dict[id][span])) + "   "
        return table_line

#------------------------------------------------------------------------------
def process_median_earnings_by_sex_by_experience(title_dict, data_dict):
	base_id="B20017"
        print banner
        print title_dict[base_id]
        print banner
        print "                     Total  White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"
	print earnings_median_experience_table_line(base_id, "           Total    ", "1", "73")
	print earnings_median_experience_table_line(base_id, "            Male    ", "2", "73")
	print earnings_median_experience_table_line(base_id, "Worked full-time    ", "3", "73")
	print earnings_median_experience_table_line(base_id, "           Other    ", "4", "73")
	print earnings_median_experience_table_line(base_id, "          Female    ", "5", "73")
	print earnings_median_experience_table_line(base_id, "Worked full-time    ", "6", "73")
	print earnings_median_experience_table_line(base_id, "           Other    ", "7", "73")
#---------------------------------------------------------------------------
#
#---------------------------------------------------------------------------
def occupation_and_earnings_table_line(base_id, category, span):
	data_dict[base_id]["11"] = str("99999")
	table_line = category + two_digit_pc("$" + str((int(data_dict[base_id][span]) + int(data_dict[base_id][str(int(span)+37)])) / 2)) + "   "
	table_line += two_digit_pc("$" + str(data_dict[base_id][span])) + "   "
	table_line += two_digit_pc("$" + str(data_dict[base_id][str(int(span)+37)])) + "   "
	return table_line
#---------------------------------------------------------------------------
def process_sex_by_occupation_and_earnings(title_dict, data_dict):
	base_id="B24022"
        print banner
        print title_dict[base_id]
        print banner
	print "                                          Total    Male    Female"
	print occupation_and_earnings_table_line(base_id, "                               Overall    ", "1")	
	print occupation_and_earnings_table_line(base_id, "               Management/Professional    ", "2")
	print occupation_and_earnings_table_line(base_id, "         Management/Business/Financial    ", "3")
	print occupation_and_earnings_table_line(base_id, "                            Management    ", "4")
	print occupation_and_earnings_table_line(base_id, "         Business/Financial Operations    ", "5")
	print occupation_and_earnings_table_line(base_id, "                          Professional    ", "6")
	print occupation_and_earnings_table_line(base_id, "                 Computer/Mathematical    ", "7")
	print occupation_and_earnings_table_line(base_id, "              Architecture/Engineering    ", "8")
	print occupation_and_earnings_table_line(base_id, "          Life/Physical/Social Science    ", "9")
	print occupation_and_earnings_table_line(base_id, "              Community/Social Service    ", "10")
	print occupation_and_earnings_table_line(base_id, "                                 Legal    ", "11")
	print occupation_and_earnings_table_line(base_id, "            Education/Training/Library    ", "12")
	print occupation_and_earnings_table_line(base_id, "Arts/Design/Entertainment/Sports/Media    ", "13")
	print occupation_and_earnings_table_line(base_id, "     Healthcare Practitioner/Technical    ", "14")
	print occupation_and_earnings_table_line(base_id, "            Health Diagnosis/Treatment    ", "15")
	print occupation_and_earnings_table_line(base_id, "      Health Technologists/Technicians    ", "16")
	print occupation_and_earnings_table_line(base_id, "                               Service    ", "17")
	print occupation_and_earnings_table_line(base_id, "                    Healthcare Support    ", "18")
	print occupation_and_earnings_table_line(base_id, "                    Protective Service    ", "19")
	print occupation_and_earnings_table_line(base_id, "              Fire Fighting/Prevention    ", "20")
	print occupation_and_earnings_table_line(base_id, "                       Law Enforcement    ", "21")
	print occupation_and_earnings_table_line(base_id, "              Food Preparation/Service    ", "22")
	print occupation_and_earnings_table_line(base_id, "          Building/Grounds Maintenance    ", "23")
	print occupation_and_earnings_table_line(base_id, "                 Personal Care/Service    ", "24")
	print occupation_and_earnings_table_line(base_id, "                          Sales/Office    ", "25")
	print occupation_and_earnings_table_line(base_id, "                                 Sales    ", "26")
	print occupation_and_earnings_table_line(base_id, "         Office/Administrative Support    ", "27")
	print occupation_and_earnings_table_line(base_id, "              Farming/Fishing/Forestry    ", "28")
	print occupation_and_earnings_table_line(base_id, "   Construction/Extraction/Maintenance    ", "29")
	print occupation_and_earnings_table_line(base_id, "               Construction/Extraction    ", "30")
	print occupation_and_earnings_table_line(base_id, "              Installation/Maintenance    ", "31")
	print occupation_and_earnings_table_line(base_id, "             Production/Transportation    ", "32")
	print occupation_and_earnings_table_line(base_id, "                            Production    ", "33")
	print occupation_and_earnings_table_line(base_id, "        Transportation/Material Moving    ", "34")
	print occupation_and_earnings_table_line(base_id, "                        Transportation    ", "35")
	print occupation_and_earnings_table_line(base_id, "                Motor Vehicle Operator    ", "36")
	print occupation_and_earnings_table_line(base_id, "                       Material Moving    ", "37")
#-------------------------------------------------------------------------
#
#-------------------------------------------------------------------------
def industry_earnings_table_line(base_id, category, span):
	table_line = category + two_digit_pc("$" + str((int(data_dict[base_id][span]) + int(data_dict[base_id][str(int(span)+27)])) / 2)) + "   "
        table_line += two_digit_pc("$" + str(data_dict[base_id][span])) + "   "
        table_line += two_digit_pc("$" + str(data_dict[base_id][str(int(span)+27)])) + "   "
        return table_line

#-------------------------------------------------------------------------
def process_sex_by_industry_earnings(title_dict, data_dict):
	base_id="B24042"
        print banner
        print title_dict[base_id]
        print banner
        print "                                             Total    Male    Female"
	print industry_earnings_table_line(base_id, "                                 Overall    ", "1")
	print industry_earnings_table_line(base_id, "     Agriculture/Forestry/Fishing/Mining    ", "2")
	print industry_earnings_table_line(base_id, "            Agriculture/Forestry/Fishing    ", "3")
	print industry_earnings_table_line(base_id, "                                  Mining    ", "4")
	print industry_earnings_table_line(base_id, "                            Construction    ", "5")
	print industry_earnings_table_line(base_id, "                           Manufacturing    ", "6")
	print industry_earnings_table_line(base_id, "                         Wholesale Trade    ", "7")
	print industry_earnings_table_line(base_id, "                            Retail Trade    ", "8")
	print industry_earnings_table_line(base_id, "    Transportation/Warehousing/Utilities    ", "9")
	print industry_earnings_table_line(base_id, "              Transportation/Warehousing    ", "10")
	print industry_earnings_table_line(base_id, "                               Utilities    ", "11")	
	print industry_earnings_table_line(base_id, "                             Information    ", "12")
	print industry_earnings_table_line(base_id, "    Finance/Insurance/Real Estate/Rental    ", "13")
	print industry_earnings_table_line(base_id, "                       Finance/Insurance    ", "14")
	print industry_earnings_table_line(base_id, "                      Real Estate/Rental    ", "15")
	print industry_earnings_table_line(base_id, "Professional/Scientific/Management/Waste    ", "16")
	print industry_earnings_table_line(base_id, "                 Professional/Scientific    ", "17")
	print industry_earnings_table_line(base_id, "                              Management    ", "18")
	print industry_earnings_table_line(base_id, "                        Waste Management    ", "19")
	print industry_earnings_table_line(base_id, " Education/Health Care/Social Assistance    ", "20")
	print industry_earnings_table_line(base_id, "                               Education    ", "21")
	print industry_earnings_table_line(base_id, "           Health Care/Social Assistance    ", "22")
	print industry_earnings_table_line(base_id, "    Arts/Entertainment/Accomodation/Food    ", "23")
	print industry_earnings_table_line(base_id, "                      Arts/Entertainment    ", "24")
	print industry_earnings_table_line(base_id, "                       Accomodation/Food    ", "25")
	print industry_earnings_table_line(base_id, "                                   Other    ", "26")
	print industry_earnings_table_line(base_id, "                   Public Administration    ", "27")
#-------------------------------------------------------------------------
#
#-------------------------------------------------------------------------
def worker_class_table_line(base_id, category, span):
        table_line = category + two_digit_pc("$" + str((int(data_dict[base_id][span]) + int(data_dict[base_id][str(int(span)+10)])) / 2)) + "   "
        table_line += two_digit_pc("$" + str(data_dict[base_id][span])) + "   "
        table_line += two_digit_pc("$" + str(data_dict[base_id][str(int(span)+10)])) + "   "
        return table_line
#-------------------------------------------------------------------------
def process_sex_by_worker_class_earnings(title_dict, data_dict):
        base_id="B24092"
        print banner
        print title_dict[base_id]
        print banner
        print "                                             Total    Male    Female"
	print worker_class_table_line(base_id, "                                 Overall    ", "1")
	print worker_class_table_line(base_id, "      Private for-profit wage and salary    ", "2")
	print worker_class_table_line(base_id, "                Private Company Employee    ", "3")	
	print worker_class_table_line(base_id, "     Self-employed in corporate business    ", "4")
	print worker_class_table_line(base_id, "  Private not-for-profit wage and salary    ", "5")
	print worker_class_table_line(base_id, "                        Local Government    ", "6")
	print worker_class_table_line(base_id, "                        State Government    ", "7")
	print worker_class_table_line(base_id, "                      Federal Government    ", "8")
	print worker_class_table_line(base_id, " Self-employed in non-corporate business    ", "9")
	print worker_class_table_line(base_id, "                           Unpaid family    ", "10")
#---------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------
def imputation_unrelated_individuals(title_dict, data_dict):
	base_id="B99171"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
        print "            None   $_value   0-10%   10-25%   25-50%   50-100%   100%"
	table_line= "  Overall   "
        for i in range(2,9):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+7)])
                table_line += two_digit_pc(str(poverty*100/int(data_dict[base_id]["1"]))) + "      ";
        print table_line

#----------------------------------------------------------------------------
#
#----------------------------------------------------------------------------
def imputation_families(title_dict, data_dict):
	base_id="B99172"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
	print "            None   $_value   0-10%   10-25%   25-50%   50-100%   100%"
        table_line= "  Overall   "
        for i in range(2,9):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+7)])
                table_line += two_digit_pc(str(poverty*100/int(data_dict[base_id]["1"]))) + "      ";
        print table_line
#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def imputation_individual_income(title_dict, data_dict):	
	base_id="B99191"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
	print "            None   $_value   0-10%   10-25%   25-50%   50-100%   100%"
        table_line= "  Overall   "
        for i in range(2,9):
                poverty = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(poverty*100/int(data_dict[base_id]["1"]))) + "      ";
        print table_line

#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def imputation_household_income(title_dict, data_dict):
	base_id="B99192"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
	print "            None   $_value   0-10%   10-25%   25-50%   50-100%   100%"
        table_line= "  Overall   "
        for i in range(2,9):
                poverty = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(poverty*100/int(data_dict[base_id]["1"]))) + "      ";
        print table_line
#--------------------------------------------------------------------
#
#--------------------------------------------------------------------
def imputation_family_income(title_dict, data_dict):
	base_id="B99193"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
	print "            None   $_value   0-10%   10-25%   25-50%   50-100%   100%"
        table_line= "  Overall   "
        for i in range(2,9):
                poverty = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(poverty*100/int(data_dict[base_id]["1"]))) + "      ";
        print table_line
#------------------------------------------------------------------------
#
#------------------------------------------------------------------------
def imputation_nonfamily_income(title_dict, data_dict):
	base_id="B99194"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
	print "            None   $_value   0-10%   10-25%   25-50%   50-100%   100%"
        table_line= "  Overall   "
        for i in range(2,9):
                poverty = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(poverty*100/int(data_dict[base_id]["1"]))) + "      ";
        print table_line
#---------------------------------------------------------------------
#
#---------------------------------------------------------------------
def imputation_earnings(title_dict, data_dict):
	base_id="B99201"
        print banner
        print title_dict[base_id] + " (Distribution)"
        print banner
	print "            None   $_value   0-10%   10-25%   25-50%   50-100%   100%"
        table_line= "  Overall   "
        for i in range(2,9):
                poverty = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(poverty*100/int(data_dict[base_id]["1"]))) + "      ";
        print table_line
#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def poverty_by_sex_by_age(title_dict, data_dict):
	base_id="C17001"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "          Subtotal     Under_18_years     18-64_years    65_years_and_over"

        table_line = " Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,7):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+4)])
                population = int(data_dict[base_id][str(i+9)]) + int(data_dict[base_id][str(i+13)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line
	
	table_line = "  Male:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("12")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,7):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+9)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        table_line = "Female:     "
        population = int(data_dict[base_id][str("7")]) + int(data_dict[base_id][str("16")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("7")])*100 / population))+"            "

        for i in range(4,7):
                population = int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+13)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+4)])*100 / population))+ "             "
        print table_line

        return
#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
def poverty_by_ratio_of_income(title_dict, data_dict):
        base_id="C17002"
        print banner
        print title_dict[base_id] + " (Poverty Distribution)"
        print banner
        print "  Income Ratio:      <  1.00   1.00-1.99   2.00  >"

        table_line = "  Poverty Distri.:      "
        for i in range(2,5):
                        table_line +=  two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / int(data_dict[base_id]["1"])))+ "       "
        print table_line
        return
#------------------------------------------------------------------------
#
#------------------------------------------------------------------------
def poverty_by_sex_by_education(title_dict, data_dict):
        base_id="C17003"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "          Subtotal     <High_school    High_school     Associate     >=Bachelor"

        table_line = " Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(3,7):
                poverty = int(data_dict[base_id][str(i)])
                population = int(data_dict[base_id][str(i+5)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line
#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def poverty_by_sex_by_work_experience(title_dict, data_dict):
        base_id="C17004"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "         Subtotal     Full-time_job     Part-time_job     No_job"
        table_line = " Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(3,6):
                poverty = int(data_dict[base_id][str(i)])
                population = int(data_dict[base_id][str(i+4)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line
#-------------------------------------------------------------------------
#
#-------------------------------------------------------------------------
def poverty_by_sex_by_employment_status(title_dict, data_dict):
        base_id="C17005"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "        Subtotal     In_labor_force     Employed     Unemployed     Not_in_labor_force"
        table_line = " Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(3,7):
                poverty = int(data_dict[base_id][str(i)]) 
                population = int(data_dict[base_id][str(i+5)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line
#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def poverty_children_by_family_type_by_age(title_dict, data_dict):
        base_id="C17006"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                    Subtotal"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        print table_line

        table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("6")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("4")]) + int(data_dict[base_id][str("7")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+"            "

        print table_line
#-----------------------------------------------------------------------
#
#-----------------------------------------------------------------------
def poverty_unrelated_by_sex_by_age(title_dict, data_dict):
        base_id="C17007"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "          Subtotal"

        table_line = " Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"       "
        print table_line

        table_line = "  Male:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("6")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"       "
        print table_line

        table_line = "Female:     "
        population = int(data_dict[base_id][str("4")]) + int(data_dict[base_id][str("7")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+"       "
        print table_line
#-------------------------------------------------------------------------
#
#-------------------------------------------------------------------------
def poverty_unrelated_by_work_by_householder(title_dict, data_dict):
        base_id="C17009"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                     Subtotal"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        print table_line

        table_line = "  Worked_full-time:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("7")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        print table_line

        table_line = "  Worked_part-time:     "
        population = int(data_dict[base_id][str("4")]) + int(data_dict[base_id][str("8")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+"            "
        print table_line

        table_line = "      Did_not_work:     "
        population = int(data_dict[base_id][str("5")]) + int(data_dict[base_id][str("9")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("5")])*100 / population))+"            "
        print table_line
#---------------------------------------------------------------------------
#
#---------------------------------------------------------------------------
def poverty_by_family_type(title_dict, data_dict):
	base_id="C17010"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                     Subtotal"
	table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        print table_line

        table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("6")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        print table_line

        table_line = "             Other:     "
        population = int(data_dict[base_id][str("4")]) + int(data_dict[base_id][str("7")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+"            "
        print table_line
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
def poverty_families_by_type_by_children(title_dict, data_dict):
        base_id="C17012"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                    Subtotal        no child    1-2 children    3-4 children    >=5 children"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(3,7):
                poverty = int(data_dict[base_id][str(i)])
                population = int(data_dict[base_id][str(i+5)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line
#----------------------------------------------------------------------------------
#
#----------------------------------------------------------------------------------
def poverty_families_by_type_by_persons(title_dict, data_dict):
        base_id="C17013"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal        2 people      3-4 people      5-6 people      >=7 people"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(3,7):
                poverty = int(data_dict[base_id][str(i)]) 
                population = int(data_dict[base_id][str(i+5)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line
#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
def poverty_families_by_type_by_workers(title_dict, data_dict):
        base_id="C17014"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal        No workers      1 worker      2 workers      >=3 workers"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(3,7):
                poverty = int(data_dict[base_id][str(i)]) 
                population = int(data_dict[base_id][str(i+5)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line
#------------------------------------------------------------------------
#
#------------------------------------------------------------------------
def poverty_families_by_social_security(title_dict, data_dict):
        base_id="C17015"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal     w/ Soc Sec  w/ SSI/cash  w/o SSI/cash  w/o Soc Sec  w/ SSI/cash  w/o SSI/cash"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"          "
        for i in range(3,9):
                poverty = int(data_dict[base_id][str(i)])
                population = int(data_dict[base_id][str(i+7)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "           ";
        print table_line
#-----------------------------------------------------------------------
#
#-----------------------------------------------------------------------
def poverty_families_by_type_by_work(title_dict, data_dict):
        base_id="C17016"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
	print "                       Subtotal     Full-time_work   Part-time_work   No_work"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"              "
        for i in range(3,6):
                poverty = int(data_dict[base_id][str(i)])
                population = int(data_dict[base_id][str(i+4)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line
#------------------------------------------------------------------------
#
#------------------------------------------------------------------------
def poverty_household_by_age(title_dict, data_dict):
        base_id="C17017"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"               "
        print table_line
	
	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("4")]) + int(data_dict[base_id][str("13")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+"               "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("5")]) + int(data_dict[base_id][str("14")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("5")])*100 / population))+"               "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("6")]) + int(data_dict[base_id][str("15")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("6")])*100 / population))+"               "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("7")]) + int(data_dict[base_id][str("16")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("7")])*100 / population))+"               "
        print table_line

	table_line = "   Non-family Male:     "
        population = int(data_dict[base_id][str("9")]) + int(data_dict[base_id][str("18")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / population))+"               "
        print table_line

        table_line = " Non-family Female:     "
        population = int(data_dict[base_id][str("10")]) + int(data_dict[base_id][str("19")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("10")])*100 / population))+"               "
        print table_line
#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def poverty_families_by_type_by_education(title_dict, data_dict):
        base_id="C17018"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal    <High_school    High_school    Associate    >=Bachelor"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"             "
        for i in range(3,7):
                poverty = int(data_dict[base_id][str(i)]) 
                population = int(data_dict[base_id][str(i+5)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "           ";
        print table_line
#-------------------------------------------------------------------------
#
#-------------------------------------------------------------------------
def poverty_families_by_type_by_tenure(title_dict, data_dict):
        base_id="C17019"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                       Subtotal    Owner_occupied    Renter_occupied"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"              "
        for i in range(3,5):
                poverty = int(data_dict[base_id][str(i)]) 
                population = int(data_dict[base_id][str(i+3)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "               ";
        print table_line
#--------------------------------------------------------------------------
#
#--------------------------------------------------------------------------
def poverty_individuals_by_living(title_dict, data_dict):
        base_id="C17021"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "In family households:"
        print "                       Subtotal"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"              "
        print table_line
	
	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("4")]) + int(data_dict[base_id][str("11")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+"              "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("5")]) + int(data_dict[base_id][str("12")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("5")])*100 / population))+"              "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("6")]) + int(data_dict[base_id][str("13")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("6")])*100 / population))+"              "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("7")]) + int(data_dict[base_id][str("14")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("7")])*100 / population))+"              "
        print table_line
        print " "

	print "In non-family households:"

        print "                       Subtotal"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / (int(data_dict[base_id][str("8")]) + int(data_dict[base_id][str("15")]))))+"         "
        print table_line
#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
def ratio_of_income_by_family_type(title_dict, data_dict):
        base_id="C17022"
        print banner
        print title_dict[base_id] + " (Poverty Distribution)"
        print banner
        print "Under 1.30"
        print "                       Subtotal"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"           "
        print table_line

	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / int(data_dict[base_id][str("2")])))+"           "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("4")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / int(data_dict[base_id][str("2")])))+"           "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("5")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("5")])*100 / int(data_dict[base_id][str("2")])))+"           "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("6")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("6")])*100 / int(data_dict[base_id][str("2")])))+"           "
        print table_line
        print " "
	print "1.30 to 1.49"
        print "                       Subtotal"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("7")])*100 / int(data_dict[base_id][str("1")])))+"           "
        print table_line

	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("8")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("8")])*100 / int(data_dict[base_id][str("7")])))+"           "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("9")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("9")])*100 / int(data_dict[base_id][str("7")])))+"           "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("10")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("10")])*100 / int(data_dict[base_id][str("7")])))+"           "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("11")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("11")])*100 / int(data_dict[base_id][str("7")])))+"           "
        print table_line
        print " "
	print "1.50 to 1.84"
        print "                       Subtotal"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("12")])*100 / int(data_dict[base_id][str("1")])))+"           "
	print table_line
	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("13")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("13")])*100 / int(data_dict[base_id][str("12")])))+"           "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("14")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("14")])*100 / int(data_dict[base_id][str("12")])))+"           "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("15")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("15")])*100 / int(data_dict[base_id][str("12")])))+"           "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("16")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("16")])*100 / int(data_dict[base_id][str("12")])))+"           "
        print table_line
        print " "
	print "1.85 and above"
        print "                       Subtotal"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("17")])*100 / int(data_dict[base_id][str("1")])))+"           "
        print table_line

	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("18")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("18")])*100 / int(data_dict[base_id][str("17")])))+"           "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("19")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("19")])*100 / int(data_dict[base_id][str("17")])))+"          "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("20")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("20")])*100 / int(data_dict[base_id][str("17")])))+"           "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("21")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("21")])*100 / int(data_dict[base_id][str("17")])))+"           "
        print table_line
#-------------------------------------------------------------------------
#
#-------------------------------------------------------------------------
def poverty_families_by_type_by_ownchildren(title_dict, data_dict):
        base_id="C17023"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "                    Subtotal        No_child       Children"
        table_line = "             Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
        for i in range(4,6):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+7)])
                population = int(data_dict[base_id][str(i+11)]) + int(data_dict[base_id][str(i+15)]) + int(data_dict[base_id][str(i+18)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

	table_line = "    Married-couple:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("14")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        for i in range(4,6):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+11)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line

        table_line = "      Other_family:     "
        population = int(data_dict[base_id][str("6")]) + int(data_dict[base_id][str("17")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("6")])*100 / population))+"            "
        print table_line

        table_line = "  Male_householder:     "
        population = int(data_dict[base_id][str("7")]) + int(data_dict[base_id][str("18")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("7")])*100 / population))+"            "
        for i in range(4,6):
                population = int(data_dict[base_id][str(i+4)]) + int(data_dict[base_id][str(i+15)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+4)])*100 / population))+ "             "
        print table_line

        table_line = "Female_householder:     "
        population = int(data_dict[base_id][str("10")]) + int(data_dict[base_id][str("21")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("10")])*100 / population))+"            "
        for i in range(4,6):
                population = int(data_dict[base_id][str(i+7)]) + int(data_dict[base_id][str(i+18)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+7)])*100 / population))+ "             "
        print table_line
#----------------------------------------------------------------------------
#
#----------------------------------------------------------------------------
def age_by_ratio_of_income(title_dict, data_dict):
        base_id="C17024"
        print banner
        print title_dict[base_id] + " (Poverty Distribution)"
        print banner
        print "                   Subtotal   <.50           1.00      1.25      2.00      3.00      4.00       >=5.00"
        table_line = "            Total:            "
        for i in range(3,11):
                poverty = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+9)]) + int(data_dict[base_id][str(i+18)]) 
                population = int(data_dict[base_id][str("2")]) + int(data_dict[base_id][str("11")]) + int(data_dict[base_id][str("20")]) ;
                table_line += two_digit_pc(str(poverty*100/population)) + "       ";
        print table_line

	table_line = "   Under 18 years:    "
        population = int(data_dict[base_id][str("2")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"     "
        for i in range(3,11):
                population = int(data_dict[base_id][str(i)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / int(data_dict[base_id][str("2")])))+ "       "
        print table_line

        table_line = "      18-64 years:    "
        population = int(data_dict[base_id][str("11")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("11")])*100 / int(data_dict[base_id][str("1")])))+"     "
        for i in range(3,11):
                population = int(data_dict[base_id][str(i+9)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+9)])*100 / int(data_dict[base_id][str("11")])))+ "       "
        print table_line

        table_line = "65 years and over:    "
        population = int(data_dict[base_id][str("20")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("20")])*100 / int(data_dict[base_id][str("1")])))+"     "
        for i in range(3,11):
                population = int(data_dict[base_id][str(i+18)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i+18)])*100 / int(data_dict[base_id][str("20")])))+ "       "
        print table_line
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
def poverty_by_nativity(title_dict, data_dict):
        base_id="C17025"
        print banner
        print title_dict[base_id] + " (Poverty Rate)"
        print banner
        print "          Subtotal     Naturalized     Not_a_citizen"

        table_line = "   Total:     "
        table_line += two_digit_pc(str(int(data_dict[base_id][str("2")])*100 / int(data_dict[base_id][str("1")])))+"            "
	for i in range(5,7):
                poverty = int(data_dict[base_id][str(i)])
                population = int(data_dict[base_id][str(i+5)]) + poverty;
                table_line += two_digit_pc(str(poverty*100/population)) + "             ";
        print table_line

        table_line = "  Native:     "
        population = int(data_dict[base_id][str("3")]) + int(data_dict[base_id][str("8")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("3")])*100 / population))+"            "
        print table_line

        table_line = " Foreign:     "
        population = int(data_dict[base_id][str("4")]) + int(data_dict[base_id][str("9")])
        table_line += two_digit_pc(str(int(data_dict[base_id][str("4")])*100 / population))+"            "
	for i in range(5,7):
                population = int(data_dict[base_id][str(i)]) + int(data_dict[base_id][str(i+5)])
                table_line += two_digit_pc(str(int(data_dict[base_id][str(i)])*100 / population))+ "             "
        print table_line
#-----------------------------------------------------------------------
#
#-----------------------------------------------------------------------
def by_race_table_line(base_id, category, span, total):
        table_line= category + \
        two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][total]))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][span])*100 / int(data_dict[id][total]))) + "      "
        return table_line

#-----------------------------------------------------------------------	
def income_by_race(title_dict, data_dict):
        base_id="C19001"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                       Total  White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"

        print by_race_table_line(base_id, "   Less than $10,000    ", "2", "1")
	print by_race_table_line(base_id, "  $10,000 to $14,999    ", "3", "1")
	print by_race_table_line(base_id, "  $15,000 to $24,999    ", "4", "1")
	print by_race_table_line(base_id, "  $25,000 to $34,999    ", "5", "1")
	print by_race_table_line(base_id, "  $35,000 to $49,999    ", "6", "1")
	print by_race_table_line(base_id, "  $50,000 to $74,999    ", "7", "1")
	print by_race_table_line(base_id, "  $75,000 to $99,999    ", "8", "1")
	print by_race_table_line(base_id, "$100,000 to $149,999    ", "9", "1")
	print by_race_table_line(base_id, "$150,000 to $199,999    ", "10", "1")
	print by_race_table_line(base_id, "    $200,000 or more    ", "11", "1")
#------------------------------------------------------------------------
#
#------------------------------------------------------------------------
def age_table_line(base_id, category, span, total):
        table_line= category + \
        two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][total]))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][span])*100 / int(data_dict[id][total]))) + "      "
        return table_line

#------------------------------------------------------------------------
def householder_age_by_income(title_dict, data_dict):
        base_id="C19037"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                       Total  White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"

        print age_table_line(base_id, "     Householder <25    ", "2", "1")
	print age_table_line(base_id, "   Less than $10,000    ", "3", "2")
	print age_table_line(base_id, "  $10,000 to $14,999    ", "4", "2")
	print age_table_line(base_id, "  $15,000 to $24,999    ", "5", "2")
	print age_table_line(base_id, "  $25,000 to $34,999    ", "6", "2")
	print age_table_line(base_id, "  $35,000 to $49,999    ", "7", "2")
	print age_table_line(base_id, "  $50,000 to $74,999    ", "8", "2")
	print age_table_line(base_id, "  $75,000 to $99,999    ", "9", "2")
	print age_table_line(base_id, "$100,000 to $149,999    ", "10", "2")
	print age_table_line(base_id, "$150,000 to $199,999    ", "11", "2")
	print age_table_line(base_id, "    $200,000 or more    ", "12", "2")

	print age_table_line(base_id, "   Householder 25-44    ", "13", "1")
        print age_table_line(base_id, "   Less than $10,000    ", "14", "13")
        print age_table_line(base_id, "  $10,000 to $14,999    ", "15", "13")
        print age_table_line(base_id, "  $15,000 to $24,999    ", "16", "13")
        print age_table_line(base_id, "  $25,000 to $34,999    ", "17", "13")
        print age_table_line(base_id, "  $35,000 to $49,999    ", "18", "13")
        print age_table_line(base_id, "  $50,000 to $74,999    ", "19", "13")
        print age_table_line(base_id, "  $75,000 to $99,999    ", "20", "13")
        print age_table_line(base_id, "$100,000 to $149,999    ", "21", "13")
        print age_table_line(base_id, "$150,000 to $199,999    ", "22", "13")
        print age_table_line(base_id, "    $200,000 or more    ", "23", "13")

	print age_table_line(base_id, "   Householder 45-64    ", "24", "1")
        print age_table_line(base_id, "   Less than $10,000    ", "25", "24")
        print age_table_line(base_id, "  $10,000 to $14,999    ", "26", "24")
        print age_table_line(base_id, "  $15,000 to $24,999    ", "27", "24")
        print age_table_line(base_id, "  $25,000 to $34,999    ", "28", "24")
        print age_table_line(base_id, "  $35,000 to $49,999    ", "29", "24")
        print age_table_line(base_id, "  $50,000 to $74,999    ", "30", "24")
        print age_table_line(base_id, "  $75,000 to $99,999    ", "31", "24")
        print age_table_line(base_id, "$100,000 to $149,999    ", "32", "24")
        print age_table_line(base_id, "$150,000 to $199,999    ", "33", "24")
        print age_table_line(base_id, "    $200,000 or more    ", "34", "24")

	print age_table_line(base_id, "    Householder >=65    ", "35", "1")
        print age_table_line(base_id, "   Less than $10,000    ", "36", "35")
        print age_table_line(base_id, "  $10,000 to $14,999    ", "37", "35")
        print age_table_line(base_id, "  $15,000 to $24,999    ", "38", "35")
        print age_table_line(base_id, "  $25,000 to $34,999    ", "39", "35")
        print age_table_line(base_id, "  $35,000 to $49,999    ", "40", "35")
        print age_table_line(base_id, "  $50,000 to $74,999    ", "41", "35")
        print age_table_line(base_id, "  $75,000 to $99,999    ", "42", "35")
        print age_table_line(base_id, "$100,000 to $149,999    ", "43", "35")
        print age_table_line(base_id, "$150,000 to $199,999    ", "44", "35")
        print age_table_line(base_id, "    $200,000 or more    ", "45", "35")
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
def income_table_line(base_id, category, span, total):
        table_line= category + \
        two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][total]))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][span])*100 / int(data_dict[id][total]))) + "      "
        return table_line

#-----------------------------------------------------------------------------
def family_income_by_race(title_dict, data_dict):
        base_id="C19101"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                        Total  White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"

        print income_table_line(base_id, "   Less than $10,000    ", "2", "1")
	print income_table_line(base_id, "  $10,000 to $14,999    ", "3", "1")	
	print income_table_line(base_id, "  $15,000 to $24,999    ", "4", "1")
	print income_table_line(base_id, "  $25,000 to $34,999    ", "5", "1")
	print income_table_line(base_id, "  $35,000 to $49,999    ", "6", "1")
	print income_table_line(base_id, "  $50,000 to $74,999    ", "7", "1")
	print income_table_line(base_id, "  $75,000 to $99,999    ", "8", "1")
	print income_table_line(base_id, "$100,000 to $149,999    ", "9", "1")
	print income_table_line(base_id, "$150,000 to $200,000    ", "10", "1")
	print income_table_line(base_id, "    $200,000 or more    ", "11", "1")
#------------------------------------------------------------------------
#
#------------------------------------------------------------------------
def work_experience_table_line(base_id, category, span, total):
        table_line= category + \
        two_digit_pc(str(int(data_dict[base_id][span])*100 / int(data_dict[base_id][total]))) + "      "
        for a in allTheLetters:
                id = base_id+a
                if id in data_dict:
                        table_line = table_line + \
                two_digit_pc(str(int(data_dict[id][span])*100 / int(data_dict[id][total]))) + "      "
        return table_line
#------------------------------------------------------------------------
def by_work_experience(title_dict, data_dict):
        base_id="C20005"
        print banner
        print title_dict[base_id] + " (Income Distribution)"
        print banner
        print "                          Total  White   African   Native  Asian   Islander    Other    >Two  Caucasian  Hispanic"
        print work_experience_table_line(base_id, "  Male_worked_full-time    ", "3", "1")
	print work_experience_table_line(base_id, "   $1 to $9,999 or loss    ", "6", "3")
	print work_experience_table_line(base_id, "     $10,000 to $19,999    ", "7", "3")
	print work_experience_table_line(base_id, "     $20,000 to $29,999    ", "8", "3")
	print work_experience_table_line(base_id, "     $30,000 to $49,999    ", "9", "3")
	print work_experience_table_line(base_id, "     $50,000 to $74,999    ", "10", "3")
	print work_experience_table_line(base_id, "        $75,000 or more    ", "11", "3")

	print work_experience_table_line(base_id, "             Male_other    ", "12", "1")
        print work_experience_table_line(base_id, "   $1 to $9,999 or loss    ", "15", "12")
        print work_experience_table_line(base_id, "     $10,000 to $19,999    ", "16", "12")
        print work_experience_table_line(base_id, "     $20,000 to $29,999    ", "17", "12")
        print work_experience_table_line(base_id, "     $30,000 to $49,999    ", "18", "12")
        print work_experience_table_line(base_id, "     $50,000 to $74,999    ", "19", "12")
        print work_experience_table_line(base_id, "        $75,000 or more    ", "20", "12")

	print work_experience_table_line(base_id, "Female_worked_full-time    ", "22", "1")
        print work_experience_table_line(base_id, "   $1 to $9,999 or loss    ", "25", "22")
        print work_experience_table_line(base_id, "     $10,000 to $19,999    ", "26", "22")
        print work_experience_table_line(base_id, "     $20,000 to $29,999    ", "27", "22")
        print work_experience_table_line(base_id, "     $30,000 to $49,999    ", "28", "22")
        print work_experience_table_line(base_id, "     $50,000 to $74,999    ", "29", "22")
        print work_experience_table_line(base_id, "        $75,000 or more    ", "30", "22")

	print work_experience_table_line(base_id, "           Female_other    ", "31", "1")
        print work_experience_table_line(base_id, "   $1 to $9,999 or loss    ", "34", "31")
        print work_experience_table_line(base_id, "     $10,000 to $19,999    ", "35", "31")
        print work_experience_table_line(base_id, "     $20,000 to $29,999    ", "36", "31")
        print work_experience_table_line(base_id, "     $30,000 to $49,999    ", "37", "31")
        print work_experience_table_line(base_id, "     $50,000 to $74,999    ", "38", "31")
        print work_experience_table_line(base_id, "        $75,000 or more    ", "39", "31")

#-------------------------------------------------------------
# this function process data
#-------------------------------------------------------------
def process_data(title_dict, data_dict):
	process_poverty_by_sex_by_age(title_dict, data_dict)
	print " "
	process_poverty_by_ratio_of_income(title_dict, data_dict)
	print " "
	process_poverty_by_sex_by_education(title_dict, data_dict)
	print " "
	process_poverty_by_sex_by_work_experience(title_dict, data_dict)	
	print " "
	process_poverty_by_sex_by_employment_status(title_dict, data_dict)
	print " "
	process_poverty_children_by_family_type_by_age(title_dict, data_dict)
	print " "
	process_poverty_unrelated_by_sex_by_age(title_dict, data_dict)
	print " "
	income_deficit_unrelated_by_sex(title_dict, data_dict)
	print " "
	process_poverty_unrelated_by_work_by_householder(title_dict, data_dict)
	print " "
	process_poverty_families_by_type_by_children(title_dict, data_dict)
	print " "
	income_deficit_families_by_type(title_dict, data_dict)
	print " "
	process_poverty_families_by_type_by_children(title_dict, data_dict)
	print " "
	process_poverty_families_by_type_by_persons(title_dict, data_dict)
	print " "
	process_poverty_families_by_type_by_workers(title_dict, data_dict)
	print " "
	process_poverty_families_by_social_security(title_dict, data_dict)
	print " "
	process_poverty_families_by_type_by_work(title_dict, data_dict)
	print " "
	process_poverty_household_by_age(title_dict, data_dict)
	print " "
	process_poverty_families_by_type_by_education(title_dict, data_dict)
	print " "
	process_poverty_families_by_type_by_tenure(title_dict, data_dict)
	print " "
	process_poverty_by_age_by_race(title_dict, data_dict)
	print " "
	process_poverty_individuals_by_living(title_dict, data_dict)
	print " "
	process_ratio_of_income_by_family_type(title_dict, data_dict)
	print " "
	process_poverty_families_by_type_by_ownchildren(title_dict, data_dict)
	print " "
	process_age_by_ratio_of_income(title_dict, data_dict)
	print " "
	process_poverty_by_nativity(title_dict, data_dict)
	print " "
	process_income_by_race(title_dict, data_dict)
	print " "
	process_median_household_income(title_dict, data_dict)
	print " "
	process_household_income_by_size(title_dict, data_dict)		
	print " "
	process_aggregate_household_income_by_race(title_dict, data_dict)
	print " "
	process_householder_age_by_income(title_dict, data_dict)
	print " "
	process_median_income_by_age(title_dict, data_dict)
	print " "
	process_aggregate_income_by_age(title_dict, data_dict)
	print " "
	process_earnings_for_households(title_dict, data_dict)
	print " "
	wage_salary_income_for_households(title_dict, data_dict)
	print " "
	self_employment_income(title_dict, data_dict)
	print " "
	interest_dividends_or_rental_income(title_dict, data_dict)
	print " "
	social_security_income(title_dict, data_dict)
	print " "
	supplemental_security_income(title_dict, data_dict)
	print " "
	public_assistance_income_for_households(title_dict, data_dict)
	print " "
	food_stamps_for_households(title_dict, data_dict)
	print " "
	retirement_income_for_households(title_dict, data_dict)
	print " "
	other_types_of_income(title_dict, data_dict)
	print " "
	aggregate_household_earnings_total(title_dict, data_dict)
	print " "
	process_income_quintile_upper(title_dict, data_dict)
	print " "
	mean_quintile_incomes(title_dict, data_dict)
	print " "
	shares_income_quintile(title_dict, data_dict)
	print " "
	gini_index(title_dict, data_dict)
	print " "
	process_family_income_by_race(title_dict, data_dict)
	print " "
	family_median_income_by_race(title_dict, data_dict)
	print " "
	median_family_income_by_size(title_dict, data_dict)
	print " "
	median_family_income_by_earners(title_dict, data_dict)
	print " "
	median_family_income_by_children(title_dict, data_dict)
	print " "
	median_income_by_type_family_children(title_dict, data_dict)
	print " "
	family_income_aggregate(title_dict, data_dict)
	print " "
	aggregate_income_by_type_by_children(title_dict, data_dict)
	print " "
	aggregate_income_by_family_workers(title_dict, data_dict)
	print " "
	aggregate_income_by_age_by_type(title_dict, data_dict)
	print " "
	family_type_by_own_children_income(title_dict, data_dict)
	print " "
	process_nonfamily_household_income(title_dict, data_dict)
	print " "
	non_family_median_income(title_dict, data_dict)
	print " "
	aggregate_nonfamily_income(title_dict, data_dict)
	print " "
	median_nonfamily_income(title_dict, data_dict)
	print " "
	aggregate_nonfamily_income_alone(title_dict, data_dict)
	print " "
	per_capita_income_by_race(title_dict, data_dict)
	print " "
	aggregate_income_by_race(title_dict, data_dict)
	print " "
	process_sex_by_experience(title_dict, data_dict)
	print " "
	median_income_by_sex_by_experience(title_dict, data_dict)
	print " "
	process_sex_by_earnings(title_dict, data_dict)
	print " "
	median_earnings_by_sex(title_dict, data_dict)
	print " "
	aggregate_earnings_by_sex_by_experience(title_dict, data_dict)
	print " "
	median_earnings_by_sex_by_education(title_dict, data_dict)
	print " "
	sex_by_work_experience(title_dict, data_dict)
	print " "
	process_median_earnings_by_sex_by_experience(title_dict, data_dict)
	print " "
	process_sex_by_occupation_and_earnings(title_dict, data_dict)
	print " "
	process_sex_by_industry_earnings(title_dict, data_dict)
	print " "
	process_sex_by_worker_class_earnings(title_dict, data_dict)
	print " "
	imputation_unrelated_individuals(title_dict, data_dict)
	print " "
	imputation_families(title_dict, data_dict)
	print " "
	imputation_individual_income(title_dict, data_dict)
	print " "
	imputation_household_income(title_dict, data_dict)
	print " "
	imputation_family_income(title_dict, data_dict)
	print " "
	imputation_nonfamily_income(title_dict, data_dict)
	print " "
	imputation_earnings(title_dict, data_dict)
	print " "
	poverty_by_sex_by_age(title_dict, data_dict)
	print " "
	poverty_by_ratio_of_income(title_dict, data_dict)
	print " "
	poverty_by_sex_by_education(title_dict, data_dict)
	print " "
	poverty_by_sex_by_work_experience(title_dict, data_dict)
	print " "
	poverty_by_sex_by_employment_status(title_dict, data_dict)
	print " "
	poverty_children_by_family_type_by_age(title_dict, data_dict)
	print " "
	poverty_unrelated_by_sex_by_age(title_dict, data_dict)
	print " "
	poverty_unrelated_by_work_by_householder(title_dict, data_dict)
	print " "
	poverty_by_family_type(title_dict, data_dict)
	print " "
	poverty_families_by_type_by_children(title_dict, data_dict)
	print " "
	poverty_families_by_type_by_persons(title_dict, data_dict)
	print " "
	poverty_families_by_type_by_workers(title_dict, data_dict)
	print " "
	poverty_families_by_social_security(title_dict, data_dict)
	print " "
	poverty_families_by_type_by_work(title_dict, data_dict)
	print " "
	poverty_household_by_age(title_dict, data_dict)
	print " "
	poverty_families_by_type_by_education(title_dict, data_dict)
	print " "
	poverty_families_by_type_by_tenure(title_dict, data_dict)
	print " "
	poverty_individuals_by_living(title_dict, data_dict)
	print " "
	ratio_of_income_by_family_type(title_dict, data_dict)
	print " "
	poverty_families_by_type_by_ownchildren(title_dict, data_dict)
	print " "
	age_by_ratio_of_income(title_dict, data_dict)
	print " "
	poverty_by_nativity(title_dict, data_dict)
	print " "
	income_by_race(title_dict, data_dict)
	print " "
	householder_age_by_income(title_dict, data_dict)
	print " "
	family_income_by_race(title_dict, data_dict)
	print " "
	by_work_experience(title_dict, data_dict)
	print " "
	return
# -----------------------------------------------------------
# this function reads w1010.txt and id -> entry -> data
#-------------------------------------------------------------
def read_data(dict):
	data = {}
	ans = open( "/home/bigboy/UCSD-PRJ/UCSD-GOHS-DNHS/data/w1010.txt", "r" )
	for line in ans:
                line = line.strip()
                line = line.rstrip()
                line = line.lstrip()
                items = line.split("|")
                for i in range(len(items)):
                        items[i] = items[i].strip()

		current_id = items[2]
		current_index = items[3]
		items[5] = items[5].replace(",", "")
		current_data = items[5]

		if current_index == "1":
			data[current_id] = {}
		
		data[current_id][current_index] = current_data

	ans.close()
	return data

#-------------------------------------------------------------------
# MAIN
#-------------------------------------------------------------------

title_dict = read_headers()
data_dict = read_data(title_dict)

process_data(title_dict, data_dict)
